#summary Getting started guide for using the framework.
#labels Featured

Accord.NET is an extension to AForge.NET, a popular C# framework for computer vision and machine learning. Currently, Accord.NET provides many statistical analysis and processing functions, as well as audio, video and image processing routines. 

 <g:plusone size="large"></g:plusone>

This guide is intended to show new users how to install the Accord.NET and AForge.NET Frameworks and show how to create a simple application making use of both frameworks.
There are two ways to quickly get up and running with the framework. The fastest way is through [http://nuget.org/packages?q=Accord.NET NuGet]. However, this is somewhat experimental and source code and sample applications will not be included. The second fastest way is to use the executable installer. This guide will deal with the later.

<br />

<h2> Contents </h2>
<wiki:toc max_depth="2" />

<br />

= Downloading =

The Accord.NET Framework requires AForge.NET to be already installed in your system. Each release of the Accord.NET Framework is always built against one particular version of the AForge.NET Framework, and compatibility is guaranteed only with this particular release. The matching version number for this particular release of AForge.NET will always be included in the release notes for a given Accord.NET release. Please note that, despite being built only against one particular version, newer releases than those indicated in the release notes may also work - albeit such scenarios will not be officially supported.


== Accord.NET Framework ==

Framework releases for Accord.NET are available in the [http://code.google.com/p/accord/downloads/list download section], with newest releases always on the top of the page. In any particular release there will be at least three download options, distinguishable by the last part of the filename, as shown in the table below.

<p align="center">

|| _Accord.NET Framework-a.b.c*.exe*_: || Executable installer for binaries and source code ||
|| _Accord.NET Framework-a.b.c*.rar*_: || Compressed archive with binaries and source code ||
|| _Accord.NET Framework-a.b.c-*(libs only).rar*_: || Compressed archive file containing only .dll files ||

</p>

Most users would want to download the executable installer, since it provides the easiest way to install the Accord.NET binaries, source code and documentation. The compressed files would be of interest for Linux users willing to run the framework on Mono.

The following instructions will assume the user has downloaded the executable installer. After the executable installer has finished downloading, please double-click it to start the setup process.


== AForge.NET Framework ==

The official site for the AForge.NET Framework is located at [http://www.aforgenet.com http://www.aforgenet.com], altough its official repository is hosted at Google Code on [http://aforge.googlecode.com http://aforge.googlecode.com]. Its main download page is located on [http://code.google.com/p/aforge/downloads/list http://code.google.com/p/aforge/downloads/list].

As mentioned before, each release of the Accord.NET Framework is built against one particular version of the AForge.NET Framework. Installing the most compatible version of AForge.NET will prevent integration issues between the two frameworks.


<br />

= Installing =

The following sections will assume the user has downloaded the framework's executable installer. To start installation, double-click the downloaded file.

== Accord.NET Framework ==

After double-clicking the installer, a setup wizard will pop-in to guide the installation process. The installation procedure is very straightforward. After accepting the user's license agreement, it will be possible to customize the installation by selecting which modules should be installed.

<p align="center">

|| <img src="http://accord.googlecode.com/svn/wiki/guides/starting/accord-setup.png" width="400px"/> || <img src="http://accord.googlecode.com/svn/wiki/guides/starting/accord-license.png" width="400px"/> ||

</p>


The installer components include the mandatory Accord.NET libraries, the documentation, the source code and the sample applications. 

 * The Accord.NET libraries are the .NET assemblies which can be referenced in .NET projects, including the .XML documentation for IntelliSense support.
 * The documentation includes the [http://en.wikipedia.org/wiki/Microsoft_Compiled_HTML_Help Compiled HTML Help] file containing the documentation generated by Sandcastle.
 * The sources include the complete framework's source code which can be opened, modified and be used to recompile portions or the entire framework for your own needs (the framework is distributed under a [http://en.wikipedia.org/wiki/GNU_Lesser_General_Public_License LGPL license] - please read the full license terms for details).
 * The sample applications include pre-compiled applications demonstrating what can be accomplished with the Accord.NET Framework: Most of them are detailed in the [[sample applications]] page in this wiki. Since those have been pre-compiled, they represent the biggest component available in the installer.

<p align="center">

|| <img src="http://accord.googlecode.com/svn/wiki/guides/starting/accord-components.png" width="400px"/> || <img src="http://accord.googlecode.com/svn/wiki/guides/starting/accord-installing.png" width="400px"/> ||

</p>

After the setup is properly configured, the installation will start copying files to your computer. By default, all files will be installed under _C:\Program Files\Accord.NET_

 * Source code will be available at _Accord.NET\Framework\Sources_;
 * Documentation will be available at _Accord.NET\Framework\Docs_; and
 * Sample applications will be available under _Accord.NET\Framework\Samples_.

The framework's assemblies will be automatically registered to be available under Visual Studio's Add Reference Dialog but will not be registered at the GAC. If desired, you may manually compile the binaries with [http://en.wikipedia.org/wiki/Native_Image_Generator ngen] for further speedups.


== AForge.NET Framework ==

There are no special requirements on the installation of the AForge.NET Framework besides using the recommended version. Installation can proceed as usual, and all settings can be left on default or configured as desired. For more details on installing AForge.NET, please refer to the [http://aforgenet.com/ official AForge.NET site].

<p align="center">

|| <img src="http://accord.googlecode.com/svn/wiki/guides/starting/aforge-setup.png" width="400px"/> || <img src="http://accord.googlecode.com/svn/wiki/guides/starting/aforge-installing.png" width="400px"/> ||

</p>

<br />

= Obtaining documentation = 

After both frameworks have been installed, Accord.NET will be ready to be used. The framework's documentation will be available in the Start Menu in the form of a Microsoft's Compiled HTML Help file. The latest version of the [http://accord.googlecode.com/svn/docs/Index.html Accord.NET documentation can also be browsed online].  

<p align="center">

|| <img src="http://accord.googlecode.com/svn/wiki/guides/starting/accord-start-menu.png" height="400px"/> || <img src="http://accord.googlecode.com/svn/wiki/guides/starting/accord-documentation.png" width="500px" /> ||

</p>

If included documentation is not enough, please take a look on the sample applications accompanying the framework. Most questions related to framework usage can be answered by taking a quick look on how the sample applications instantiate portions of the framework to accomplish their work.

If you still have questions regarding the Accord.NET Framework, please refer to [http://groups.google.com/group/accord-net Accord.NET's forums]. If you have questions related to AForge.NET, machine learning, artificial intelligence, imaging or other general topics, please refer to the [http://aforgenet.com/forum/ AForge.NET Forums].

<br />

= Creating a sample application = 

In the following example we will be creating a new application using Accord.NET. The goal of this section is to show how to add references to the Accord.NET and AForge.NET Frameworks.

 * Download [http://accord.googlecode.com/svn/wiki/guides/starting/SampleApplication1.zip sample application].

In this example we will be using Microsoft's Visual Studio 2008 Team Edition . However any decent IDE, or even command line compilers would suffice. Free versions of Visual Studio, named Express Editions, are available on http://www.microsoft.com/express/ . The open-source IDE SharpDevelop is also available on http://www.sharpdevelop.net . There is also limited support for MonoDevelop on Linux .

We will start this example by opening up Visual Studio.

<p align="center">
<img width="700px" src="http://accord.googlecode.com/svn/wiki/guides/starting/vs-1.png"/>
</p>

After Visual Studio has finished loading, click the File->New Project menu item to start creating a new project.

<p align="center">
<img width="700px" src="http://accord.googlecode.com/svn/wiki/guides/starting/vs-2.png"/>
</p>

In the New Project Dialog, select the item "Console Application" under the Visual C# category. Even if we are going to use C# in this example, please keep in mind that Accord.NET supports all .NET compatible languages such as VB.NET or C++/CLI.

<p align="center">
<img width="700px" src="http://accord.googlecode.com/svn/wiki/guides/starting/vs-3.png"/>
</p>

At this point we can start adding references to our project. Right-click the project name on the Solution Browser and select "Add References"

<p align="center">
<img width="700px" src="http://accord.googlecode.com/svn/wiki/guides/starting/vs-5.png"/>
</p>

We will start by adding references to Accord.NET. Since we are going to develop a sample application which uses Support Vector Machines, we will want to add references to the Accord.MachineLearning, Accord.Statistics, Accord.Math and Accord.Core namespaces. If you wish to report information using visual controls, please add a reference to Accord.Controls and to .NET's System.Windows.Forms dlls.

<p align="center">

|| <img width="400px" src="http://accord.googlecode.com/svn/wiki/guides/starting/vs-6.png"/> || <img width="400px" src="http://accord.googlecode.com/svn/wiki/guides/starting/vs-7.png"/> ||

</p>

Now we are ready to start developing our application. The following code demonstrates how to create and teach a SVM to recognize the classic XOR problem. The XOR problem is a classical nonlinearly separable problem which can not be solved by a simple linear classifier (such as a Perceptron, or a Linear SVM). The problem consists on learning the following boolean function.

|||| *inputs* || *output* ||
|| *a* || *b* || *a⊕b* ||
|| 0 || 0 || 0 ||
|| 0 || 1 || 1 ||
|| 1 || 0 || 1 ||
|| 1 || 1 || 0 ||

The inputs of the problem are given by the *a* and *b* columns. The output is the result on *a⊕b*. To solve it, we will use a Polynomial kernel machine. Support Vector Machines require the outputs to be either -1 or +1, so we will assign -1 to any zero values in the output columns. 
The code for the sample application is shown below. 

<p align="center">

{{{
using System;
using Accord.Controls;
using Accord.MachineLearning.VectorMachines;
using Accord.MachineLearning.VectorMachines.Learning;
using Accord.Math;
using Accord.Statistics.Kernels;

namespace SampleApplication1
{
    class Program
    {
        [MTAThread]
        static void Main(string[] args)
        {
            double[][] inputs =
            {
                /* 1.*/ new double[] { 0, 0 },
                /* 2.*/ new double[] { 1, 0 },
                /* 3.*/ new double[] { 0, 1 },
                /* 4.*/ new double[] { 1, 1 },
            };

            int[] outputs =
            { 
                /* 1. 0 xor 0 = 0: */ -1,
                /* 2. 1 xor 0 = 1: */ +1,
                /* 3. 0 xor 1 = 1: */ +1,
                /* 4. 1 xor 1 = 0: */ -1,
            };


            // Create a new machine with a polynomial kernel and two inputs
            KernelSupportVectorMachine ksvm = new KernelSupportVectorMachine(
                new Gaussian(), 2);

            // Create the learning algorithm with the given inputs and outputs
            SequentialMinimalOptimization smo = new SequentialMinimalOptimization(
                machine: ksvm, inputs: inputs, outputs: outputs)
                {
                    Complexity = 100  // Create a hard-margin SVM
                };

            // Teach the machine
            double error = smo.Run();

            Console.WriteLine("error: " + error);

            // Show results on screen
            ScatterplotBox.Show("Training data", inputs, outputs);

            ScatterplotBox.Show("SVM results", inputs,
                inputs.Apply(p => System.Math.Sign(ksvm.Compute(p))));

            Console.ReadKey();
        }
    }
}
}}}

</p>

In case you need to add any missing namespace references, you can always right-click the name of a class and let Visual Studio complete it for you.

<p align="center">
<img width="700px" src="http://accord.googlecode.com/svn/wiki/guides/starting/vs-9.png"/> 
</p>

Once the application code is finished, we can run it by hitting F5 (or equivalently, clicking on the Start Debugging button) on Visual Studio. The application will train the aforementioned Support Vector Machine and should display the training error obtained after learning. A training error of zero indicates that the machine has learned the problem perfectly.

<p align="center">
<img width="700px" src="http://accord.googlecode.com/svn/wiki/guides/starting/vs-10.png"/>
</p>

<p align="center">
<img width="700px" src="http://accord.googlecode.com/svn/wiki/guides/starting/vs-11.png"/>
</p>

If you have any questions regarding the guide, please leave a comment on the project's [http://groups.google.com/group/accord-net discussion group].

<p align="right">
<g:plusone size="large"></g:plusone>
</p>