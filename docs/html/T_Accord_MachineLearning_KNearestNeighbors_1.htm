<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp">
  <head>
    <link rel="SHORTCUT ICON" href="./../icons/favicon.ico" />
    <style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style>
    <link rel="stylesheet" type="text/css" href="./../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" />
    <style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style>
    <script src="./../scripts/branding.js" type="text/javascript">
      <!---->
    </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>KNearestNeighbors(T) Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="KNearestNeighbors%3CT%3E class" />
    <meta name="System.Keywords" content="Accord.MachineLearning.KNearestNeighbors%3CT%3E class" />
    <meta name="System.Keywords" content="KNearestNeighbors%3CT%3E class, about KNearestNeighbors%3CT%3E class" />
    <meta name="System.Keywords" content="KNearestNeighbors(Of T) class" />
    <meta name="System.Keywords" content="Accord.MachineLearning.KNearestNeighbors(Of T) class" />
    <meta name="System.Keywords" content="KNearestNeighbors(Of T) class, about KNearestNeighbors(Of T) class" />
    <meta name="Microsoft.Help.F1" content="Accord.MachineLearning.KNearestNeighbors`1" />
    <meta name="Microsoft.Help.Id" content="T:Accord.MachineLearning.KNearestNeighbors`1" />
    <meta name="Description" content="K-Nearest Neighbor (k-NN) algorithm." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="'true'" />
    <meta name="container" content="Accord.MachineLearning" />
    <meta name="file" content="T_Accord_MachineLearning_KNearestNeighbors_1" />
    <meta name="guid" content="T_Accord_MachineLearning_KNearestNeighbors_1" />
    
    <link type="text/css" rel="stylesheet" href="./../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js">
      <!---->
    </script>
    <meta name="SelfBranded" content="true" />
  </head>
  <body onload="onLoad()" class="primary-mtps-offline-document">
    <div class="OH_outerDiv">
      <div class="OH_outerContent">
        <table class="TitleTable">
          <tr>
            <td class="OH_tdLogoColumn">
              <img alt="Accord.NET (logo)" src="./../icons/logo.png" />
            </td>
            <td class="OH_tdTitleColumn">KNearestNeighbors<span id="ID0EDBABAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDBABAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script><span class="typeparameter">T</span><span id="ID0EBBABAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBBABAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script> Class</td>
            <td class="OH_tdRunningTitleColumn">Accord.NET Framework</td>
          </tr>
        </table>
        <div id="mainSection">
          <div id="mainBody">
            <span class="introStyle">
              <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
              <a href="http://accord.googlecode.com/svn/docs/Index.html" target="_top">Show table of contents (goes to the online documentation index).</a>
              <br />
            </span>
            <div class="summary">
              K-Nearest Neighbor (k-NN) algorithm.
            </div>
            <div class="OH_CollapsibleAreaRegion">
              <div class="OH_regiontitle">Inheritance Hierarchy</div>
              <div class="OH_CollapsibleArea_HrDiv">
                <hr class="OH_CollapsibleArea_Hr" />
              </div>
            </div>
            <div class="OH_clear"></div>
            <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
            <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="ID0EBHOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBHOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>Object</a>
            <br />  <span class="selflink">Accord.MachineLearning<span id="ID0EEEOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EEEOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>KNearestNeighbors<span id="ID0ECEOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECEOAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>T<span id="ID0EAEOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAEOAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></span><br />    <a href="T_Accord_MachineLearning_KNearestNeighbors.htm" target="">Accord.MachineLearning<span id="ID0EBBOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBBOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>KNearestNeighbors</a><br /><p></p><b>Namespace:</b> <a href="N_Accord_MachineLearning.htm" target="">Accord.MachineLearning</a><br /><b>Assembly:</b> <span sdata="assembly">Accord.MachineLearning</span> (in Accord.MachineLearning.dll) Version: 2.9.0.0 (2.9.0.0)<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div id="snippetGroup_Syntax" class="code"><div id="ID0EABEAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EABEAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EABEAAAAA_tabimgleft"></div><div id="ID0EABEAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EABEAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EABEAAAAA_tab2" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>VB</a></div><div id="ID0EABEAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EABEAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EABEAAAAA_tabimgright"></div></div><div id="ID0EABEAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EABEAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EABEAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EABEAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EABEAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EABEAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EABEAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EABEAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre>[<a href="http://msdn2.microsoft.com/en-us/library/bcfsa90a" target="_blank">SerializableAttribute</a>]
<span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">KNearestNeighbors</span>&lt;T&gt;</pre></div><div id="ID0EABEAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>[SerializableAttribute]
public class KNearestNeighbors&lt;T&gt;</pre></div><div id="ID0EABEAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EABEAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EABEAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EABEAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EABEAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EABEAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EABEAAAAA');</script></div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Type Parameters</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><dl><dt><span class="parameter">T</span></dt><dd>The type of the input data.</dd></dl><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><p> The k-nearest neighbor algorithm (k-NN) is a method for classifying objects
              based on closest training examples in the feature space. It is amongst the simplest
              of all machine learning algorithms: an object is classified by a majority vote of
              its neighbors, with the object being assigned to the class most common amongst its 
              k nearest neighbors (k is a positive integer, typically small).</p>para&gt;
              
            <p>If k = 1, then the object is simply assigned to the class of its nearest neighbor.</p><p>
              References:
              <ul><li>
                  Wikipedia contributors. "K-nearest neighbor algorithm." Wikipedia, The
                  Free Encyclopedia. Wikipedia, The Free Encyclopedia, 10 Oct. 2012. Web.
                  9 Nov. 2012. http://en.wikipedia.org/wiki/K-nearest_neighbor_algorithm </li></ul></p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><p>The following example shows how to create
            and use a k-Nearest Neighbor algorithm to classify
            a set of numeric vectors.</p><div id="ID0ECCAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0ECCAAAAA_tabs"></div><div id="ID0ECCAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0ECCAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0ECCAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0ECCAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0ECCAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0ECCAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0ECCAAAAA','4')" title="Print">Print</a></div></div><div id="ID0ECCAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">// Create some sample learning data. In this data,</span> 
<span class="highlight-comment">// the first two instances belong to a class, the</span> 
<span class="highlight-comment">// four next belong to another class and the last</span> 
<span class="highlight-comment">// three to yet another.</span> 

<span class="highlight-keyword">double</span>[][] inputs = 
{
    <span class="highlight-comment">// The first two are from class 0</span> 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">-5</span>, <span class="highlight-number">-2</span>, <span class="highlight-number">-1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">-5</span>, <span class="highlight-number">-5</span>, <span class="highlight-number">-6</span> },

    <span class="highlight-comment">// The next four are from class 1</span> 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] {  <span class="highlight-number">2</span>,  <span class="highlight-number">1</span>,  <span class="highlight-number">1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] {  <span class="highlight-number">1</span>,  <span class="highlight-number">1</span>,  <span class="highlight-number">2</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] {  <span class="highlight-number">1</span>,  <span class="highlight-number">2</span>,  <span class="highlight-number">2</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] {  <span class="highlight-number">3</span>,  <span class="highlight-number">1</span>,  <span class="highlight-number">2</span> },

    <span class="highlight-comment">// The last three are from class 2</span> 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">11</span>,  <span class="highlight-number">5</span>,  <span class="highlight-number">4</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">15</span>,  <span class="highlight-number">5</span>,  <span class="highlight-number">6</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">10</span>,  <span class="highlight-number">5</span>,  <span class="highlight-number">6</span> },
};

<span class="highlight-keyword">int</span>[] outputs =
{
    <span class="highlight-number">0</span>, <span class="highlight-number">0</span>,        <span class="highlight-comment">// First two from class 0</span> 
    <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>,  <span class="highlight-comment">// Next four from class 1</span> 
    <span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">2</span>      <span class="highlight-comment">// Last three from class 2</span>
};


<span class="highlight-comment">// Now we will create the K-Nearest Neighbors algorithm. For this</span> 
<span class="highlight-comment">// example, we will be choosing k = 4. This means that, for a given</span> 
<span class="highlight-comment">// instance, its nearest 4 neighbors will be used to cast a decision.</span>
KNearestNeighbor knn = <span class="highlight-keyword">new</span> KNearestNeighbor(k: <span class="highlight-number">4</span>, classes: <span class="highlight-number">3</span>,
    inputs: inputs, outputs: outputs);


<span class="highlight-comment">// After the algorithm has been created, we can classify a new instance:</span> 
<span class="highlight-keyword">int</span> answer = knn.Compute(<span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">11</span>, <span class="highlight-number">5</span>, <span class="highlight-number">4</span> }); <span class="highlight-comment">// answer will be 2.</span></pre></div><div id="ID0ECCAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>// Create some sample learning data. In this data, 
// the first two instances belong to a class, the 
// four next belong to another class and the last 
// three to yet another. 

double[][] inputs = 
{
    // The first two are from class 0 
    new double[] { -5, -2, -1 },
    new double[] { -5, -5, -6 },

    // The next four are from class 1 
    new double[] {  2,  1,  1 },
    new double[] {  1,  1,  2 },
    new double[] {  1,  2,  2 },
    new double[] {  3,  1,  2 },

    // The last three are from class 2 
    new double[] { 11,  5,  4 },
    new double[] { 15,  5,  6 },
    new double[] { 10,  5,  6 },
};

int[] outputs =
{
    0, 0,        // First two from class 0 
    1, 1, 1, 1,  // Next four from class 1 
    2, 2, 2      // Last three from class 2
};


// Now we will create the K-Nearest Neighbors algorithm. For this 
// example, we will be choosing k = 4. This means that, for a given 
// instance, its nearest 4 neighbors will be used to cast a decision.
KNearestNeighbor knn = new KNearestNeighbor(k: 4, classes: 3,
    inputs: inputs, outputs: outputs);


// After the algorithm has been created, we can classify a new instance: 
int answer = knn.Compute(new double[] { 11, 5, 4 }); // answer will be 2.</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0ECCAAAAA');</script><p>The k-Nearest neighbor algorithm implementation in the 
            framework can also be used with any instance data type. For
            such cases, the framework offers a generic version of the 
            classifier, as shown in the example below.</p><div id="ID0EACAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EACAAAAA_tabs"></div><div id="ID0EACAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EACAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EACAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EACAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EACAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EACAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EACAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EACAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">// The k-Nearest Neighbors algorithm can be used with</span> 
<span class="highlight-comment">// any kind of data. In this example, we will see how</span> 
<span class="highlight-comment">// it can be used to compare, for example, Strings.</span> 

<span class="highlight-keyword">string</span>[] inputs = 
{
    <span class="highlight-literal">"Car"</span>,    <span class="highlight-comment">// class 0</span> 
    <span class="highlight-literal">"Bar"</span>,    <span class="highlight-comment">// class 0</span> 
    <span class="highlight-literal">"Jar"</span>,    <span class="highlight-comment">// class 0</span> 

    <span class="highlight-literal">"Charm"</span>,  <span class="highlight-comment">// class 1</span> 
    <span class="highlight-literal">"Chair"</span>   <span class="highlight-comment">// class 1</span>
};

<span class="highlight-keyword">int</span>[] outputs =
{
    <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>,  <span class="highlight-comment">// First three are from class 0</span> 
    <span class="highlight-number">1</span>, <span class="highlight-number">1</span>,     <span class="highlight-comment">// And next two are from class 1</span>
};


<span class="highlight-comment">// Now we will create the K-Nearest Neighbors algorithm. For this</span> 
<span class="highlight-comment">// example, we will be choosing k = 1. This means that, for a given</span> 
<span class="highlight-comment">// instance, only its nearest neighbor will be used to cast a new</span> 
<span class="highlight-comment">// decision. </span> 

<span class="highlight-comment">// In order to compare strings, we will be using Levenshtein's string distance</span>
KNearestNeighbors&lt;<span class="highlight-keyword">string</span>&gt; knn = <span class="highlight-keyword">new</span> KNearestNeighbors&lt;<span class="highlight-keyword">string</span>&gt;(k: <span class="highlight-number">1</span>, classes: <span class="highlight-number">2</span>,
    inputs: inputs, outputs: outputs, distance: Distance.Levenshtein);


<span class="highlight-comment">// After the algorithm has been created, we can use it:</span> 
<span class="highlight-keyword">int</span> answer = knn.Compute(<span class="highlight-literal">"Chars"</span>); <span class="highlight-comment">// answer should be 1.</span></pre></div><div id="ID0EACAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>// The k-Nearest Neighbors algorithm can be used with 
// any kind of data. In this example, we will see how 
// it can be used to compare, for example, Strings. 

string[] inputs = 
{
    "Car",    // class 0 
    "Bar",    // class 0 
    "Jar",    // class 0 

    "Charm",  // class 1 
    "Chair"   // class 1
};

int[] outputs =
{
    0, 0, 0,  // First three are from class 0 
    1, 1,     // And next two are from class 1
};


// Now we will create the K-Nearest Neighbors algorithm. For this 
// example, we will be choosing k = 1. This means that, for a given 
// instance, only its nearest neighbor will be used to cast a new 
// decision.  

// In order to compare strings, we will be using Levenshtein's string distance
KNearestNeighbors&lt;string&gt; knn = new KNearestNeighbors&lt;string&gt;(k: 1, classes: 2,
    inputs: inputs, outputs: outputs, distance: Distance.Levenshtein);


// After the algorithm has been created, we can use it: 
int answer = knn.Compute("Chars"); // answer should be 1.</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EACAAAAA');</script><a name="seeAlsoSection"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div class="seeAlsoStyle"><a href="AllMembers_T_Accord_MachineLearning_KNearestNeighbors_1.htm" target="">KNearestNeighbors<span id="ID0EDACAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDACAAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>T<span id="ID0EBACAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBACAAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script> Members</a></div><div class="seeAlsoStyle"><a href="N_Accord_MachineLearning.htm" target="">Accord.MachineLearning Namespace</a></div><div class="seeAlsoStyle"><a href="T_Accord_MachineLearning_KNearestNeighbors.htm" target="">Accord.MachineLearning<span id="ID0EBAAAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBAAAAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>KNearestNeighbors</a></div></div>
        </div>
      </div>
    </div>
    <div id="OH_footer" class="OH_footer">
      <p>
        <a href="http://accord.googlecode.com" target="_blank">Accord.NET Framework</a> © 2009-2013. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.</p>
      <div class="OH_feedbacklink">
        <a href="mailto:?subject=Accord.NET+Framework+KNearestNeighbors(T)+Class+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic.</div>
    </div>
  </body>
</html>