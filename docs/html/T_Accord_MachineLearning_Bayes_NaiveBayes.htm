<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp">
  <head>
    <link rel="SHORTCUT ICON" href="./../icons/favicon.ico" />
    <style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style>
    <link rel="stylesheet" type="text/css" href="./../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" />
    <style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style>
    <script src="./../scripts/branding.js" type="text/javascript">
      <!---->
    </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>NaiveBayes Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="NaiveBayes class" />
    <meta name="System.Keywords" content="Accord.MachineLearning.Bayes.NaiveBayes class" />
    <meta name="System.Keywords" content="NaiveBayes class, about NaiveBayes class" />
    <meta name="Microsoft.Help.F1" content="Accord.MachineLearning.Bayes.NaiveBayes" />
    <meta name="Microsoft.Help.Id" content="T:Accord.MachineLearning.Bayes.NaiveBayes" />
    <meta name="Description" content="Naïve Bayes Classifier." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="'true'" />
    <meta name="container" content="Accord.MachineLearning.Bayes" />
    <meta name="file" content="T_Accord_MachineLearning_Bayes_NaiveBayes" />
    <meta name="guid" content="T_Accord_MachineLearning_Bayes_NaiveBayes" />
    
    <link type="text/css" rel="stylesheet" href="./../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js">
      <!---->
    </script>
    <meta name="SelfBranded" content="true" />
  </head>
  <body onload="onLoad()" class="primary-mtps-offline-document">
    <div class="OH_outerDiv">
      <div class="OH_outerContent">
        <table class="TitleTable">
          <tr>
            <td class="OH_tdLogoColumn">
              <img alt="Accord.NET (logo)" src="./../icons/logo.png" />
            </td>
            <td class="OH_tdTitleColumn">NaiveBayes Class</td>
            <td class="OH_tdRunningTitleColumn">Accord.NET Framework</td>
          </tr>
        </table>
        <div id="mainSection">
          <div id="mainBody">
            <span class="introStyle">
              <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
              <a href="http://accord.googlecode.com/svn/docs/Index.html" target="_top">Show table of contents (goes to the online documentation index).</a>
              <br />
            </span>
            <div class="summary">
               Naïve Bayes Classifier.
             </div>
            <div class="OH_CollapsibleAreaRegion">
              <div class="OH_regiontitle">Inheritance Hierarchy</div>
              <div class="OH_CollapsibleArea_HrDiv">
                <hr class="OH_CollapsibleArea_Hr" />
              </div>
            </div>
            <div class="OH_clear"></div>
            <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
            <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="ID0EBEOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBEOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>Object</a>
            <br />  <span class="selflink">Accord.MachineLearning.Bayes<span id="ID0EBBOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBBOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>NaiveBayes</span><br /><p></p><b>Namespace:</b> <a href="N_Accord_MachineLearning_Bayes.htm" target="">Accord.MachineLearning.Bayes</a><br /><b>Assembly:</b> <span sdata="assembly">Accord.MachineLearning</span> (in Accord.MachineLearning.dll) Version: 2.9.0.0 (2.9.0.0)<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div id="snippetGroup_Syntax" class="code"><div id="ID0EAAEAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EAAEAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EAAEAAAAA_tabimgleft"></div><div id="ID0EAAEAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EAAEAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EAAEAAAAA_tab2" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>VB</a></div><div id="ID0EAAEAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EAAEAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EAAEAAAAA_tabimgright"></div></div><div id="ID0EAAEAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAEAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EAAEAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EAAEAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EAAEAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EAAEAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EAAEAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EAAEAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre>[<a href="http://msdn2.microsoft.com/en-us/library/bcfsa90a" target="_blank">SerializableAttribute</a>]
<span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">NaiveBayes</span></pre></div><div id="ID0EAAEAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>[SerializableAttribute]
public class NaiveBayes</pre></div><div id="ID0EAAEAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EAAEAAAAA');</script></div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><p>
               A naive Bayes classifier is a simple probabilistic classifier based on applying Bayes' theorem
               with strong (naive) independence assumptions. A more descriptive term for the underlying probability
               model would be "independent feature model".</p><p>
               In simple terms, a naive Bayes classifier assumes that the presence (or absence) of a particular
               feature of a class is unrelated to the presence (or absence) of any other feature, given the class
               variable. In spite of their naive design and apparently over-simplified assumptions, naive Bayes 
               classifiers have worked quite well in many complex real-world situations.</p><p>
               References:
               <ul><li>
                   Wikipedia contributors. "Naive Bayes classifier." Wikipedia, The Free Encyclopedia.
                   Wikipedia, The Free Encyclopedia, 16 Dec. 2011. Web. 5 Jan. 2012.</li></ul></p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><p>
               In this example, we will be using the famous Play Tennis example by Tom Mitchell (1998).
               In Mitchell's example, one would like to infer if a person would play tennis or not
               based solely on four input variables. Those variables are all categorical, meaning that
               there is no order between the possible values for the variable (i.e. there is no order
               relationship between Sunny and Rain, one is not bigger nor smaller than the other, but are 
               just distinct). Moreover, the rows, or instances presented below represent days on which the
               behavior of the person has been registered and annotated, pretty much building our set of 
               observation instances for learning:</p><div id="ID0EHCAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EHCAAAAA_tabs"></div><div id="ID0EHCAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EHCAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EHCAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EHCAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EHCAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EHCAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EHCAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EHCAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre>DataTable data = <span class="highlight-keyword">new</span> DataTable(<span class="highlight-literal">"Mitchell's Tennis Example"</span>);

data.Columns.Add(<span class="highlight-literal">"Day"</span>, <span class="highlight-literal">"Outlook"</span>, <span class="highlight-literal">"Temperature"</span>, <span class="highlight-literal">"Humidity"</span>, <span class="highlight-literal">"Wind"</span>, <span class="highlight-literal">"PlayTennis"</span>);

data.Rows.Add(   <span class="highlight-literal">"D1"</span>,   <span class="highlight-literal">"Sunny"</span>,      <span class="highlight-literal">"Hot"</span>,       <span class="highlight-literal">"High"</span>,   <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"No"</span>  );
data.Rows.Add(   <span class="highlight-literal">"D2"</span>,   <span class="highlight-literal">"Sunny"</span>,      <span class="highlight-literal">"Hot"</span>,       <span class="highlight-literal">"High"</span>,  <span class="highlight-literal">"Strong"</span>,   <span class="highlight-literal">"No"</span>  ); 
data.Rows.Add(   <span class="highlight-literal">"D3"</span>,  <span class="highlight-literal">"Overcast"</span>,    <span class="highlight-literal">"Hot"</span>,       <span class="highlight-literal">"High"</span>,   <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"Yes"</span> );
data.Rows.Add(   <span class="highlight-literal">"D4"</span>,   <span class="highlight-literal">"Rain"</span>,       <span class="highlight-literal">"Mild"</span>,      <span class="highlight-literal">"High"</span>,   <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"Yes"</span> ); 
data.Rows.Add(   <span class="highlight-literal">"D5"</span>,   <span class="highlight-literal">"Rain"</span>,       <span class="highlight-literal">"Cool"</span>,     <span class="highlight-literal">"Normal"</span>,  <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"Yes"</span> ); 
data.Rows.Add(   <span class="highlight-literal">"D6"</span>,   <span class="highlight-literal">"Rain"</span>,       <span class="highlight-literal">"Cool"</span>,     <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Strong"</span>,   <span class="highlight-literal">"No"</span>  ); 
data.Rows.Add(   <span class="highlight-literal">"D7"</span>,  <span class="highlight-literal">"Overcast"</span>,    <span class="highlight-literal">"Cool"</span>,     <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Strong"</span>,   <span class="highlight-literal">"Yes"</span> );
data.Rows.Add(   <span class="highlight-literal">"D8"</span>,   <span class="highlight-literal">"Sunny"</span>,      <span class="highlight-literal">"Mild"</span>,      <span class="highlight-literal">"High"</span>,   <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"No"</span>  );  
data.Rows.Add(   <span class="highlight-literal">"D9"</span>,   <span class="highlight-literal">"Sunny"</span>,      <span class="highlight-literal">"Cool"</span>,     <span class="highlight-literal">"Normal"</span>,  <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"Yes"</span> ); 
data.Rows.Add(   <span class="highlight-literal">"D10"</span>, <span class="highlight-literal">"Rain"</span>,        <span class="highlight-literal">"Mild"</span>,     <span class="highlight-literal">"Normal"</span>,  <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"Yes"</span> ); 
data.Rows.Add(   <span class="highlight-literal">"D11"</span>,  <span class="highlight-literal">"Sunny"</span>,      <span class="highlight-literal">"Mild"</span>,     <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Strong"</span>,   <span class="highlight-literal">"Yes"</span> );
data.Rows.Add(   <span class="highlight-literal">"D12"</span>, <span class="highlight-literal">"Overcast"</span>,    <span class="highlight-literal">"Mild"</span>,      <span class="highlight-literal">"High"</span>,  <span class="highlight-literal">"Strong"</span>,   <span class="highlight-literal">"Yes"</span> ); 
data.Rows.Add(   <span class="highlight-literal">"D13"</span>, <span class="highlight-literal">"Overcast"</span>,    <span class="highlight-literal">"Hot"</span>,      <span class="highlight-literal">"Normal"</span>,  <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"Yes"</span> ); 
data.Rows.Add(   <span class="highlight-literal">"D14"</span>,  <span class="highlight-literal">"Rain"</span>,       <span class="highlight-literal">"Mild"</span>,      <span class="highlight-literal">"High"</span>,  <span class="highlight-literal">"Strong"</span>,   <span class="highlight-literal">"No"</span>  );</pre></div><div id="ID0EHCAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>DataTable data = new DataTable("Mitchell's Tennis Example");

data.Columns.Add("Day", "Outlook", "Temperature", "Humidity", "Wind", "PlayTennis");

data.Rows.Add(   "D1",   "Sunny",      "Hot",       "High",   "Weak",    "No"  );
data.Rows.Add(   "D2",   "Sunny",      "Hot",       "High",  "Strong",   "No"  ); 
data.Rows.Add(   "D3",  "Overcast",    "Hot",       "High",   "Weak",    "Yes" );
data.Rows.Add(   "D4",   "Rain",       "Mild",      "High",   "Weak",    "Yes" ); 
data.Rows.Add(   "D5",   "Rain",       "Cool",     "Normal",  "Weak",    "Yes" ); 
data.Rows.Add(   "D6",   "Rain",       "Cool",     "Normal", "Strong",   "No"  ); 
data.Rows.Add(   "D7",  "Overcast",    "Cool",     "Normal", "Strong",   "Yes" );
data.Rows.Add(   "D8",   "Sunny",      "Mild",      "High",   "Weak",    "No"  );  
data.Rows.Add(   "D9",   "Sunny",      "Cool",     "Normal",  "Weak",    "Yes" ); 
data.Rows.Add(   "D10", "Rain",        "Mild",     "Normal",  "Weak",    "Yes" ); 
data.Rows.Add(   "D11",  "Sunny",      "Mild",     "Normal", "Strong",   "Yes" );
data.Rows.Add(   "D12", "Overcast",    "Mild",      "High",  "Strong",   "Yes" ); 
data.Rows.Add(   "D13", "Overcast",    "Hot",      "Normal",  "Weak",    "Yes" ); 
data.Rows.Add(   "D14",  "Rain",       "Mild",      "High",  "Strong",   "No"  );</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EHCAAAAA');</script><p><i>Obs: The DataTable representation is not required, and instead the NaiveBayes could
               also be trained directly on integer arrays containing the integer codewords.</i></p><p>
               In order to estimate a discrete Naive Bayes, we will first convert this problem to a more simpler
               representation. Since all variables are categories, it does not matter if they are represented
               as strings, or numbers, since both are just symbols for the event they represent. Since numbers
               are more easily representable than text strings, we will convert the problem to use a discrete 
               alphabet through the use of a <a href="T_Accord_Statistics_Filters_Codification.htm" target="">codebook</a>.</p><p>
               A codebook effectively transforms any distinct possible value for a variable into an integer 
               symbol. For example, “Sunny” could as well be represented by the integer label 0, “Overcast” 
               by “1”, Rain by “2”, and the same goes by for the other variables. So:</p><div id="ID0EDCAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EDCAAAAA_tabs"></div><div id="ID0EDCAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EDCAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EDCAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EDCAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EDCAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EDCAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EDCAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EDCAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">// Create a new codification codebook to </span> 
<span class="highlight-comment">// convert strings into integer symbols</span>
Codification codebook = <span class="highlight-keyword">new</span> Codification(data);

<span class="highlight-comment">// Translate our training data into integer symbols using our codebook:</span>
DataTable symbols = codebook.Apply(data); 
<span class="highlight-keyword">int</span>[][] inputs  = symbols.ToIntArray(<span class="highlight-literal">"Outlook"</span>, <span class="highlight-literal">"Temperature"</span>, <span class="highlight-literal">"Humidity"</span>, <span class="highlight-literal">"Wind"</span>); 
<span class="highlight-keyword">int</span>[]   outputs = symbols.ToIntArray(<span class="highlight-literal">"PlayTennis"</span>).GetColumn(<span class="highlight-number">0</span>);</pre></div><div id="ID0EDCAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>// Create a new codification codebook to  
// convert strings into integer symbols
Codification codebook = new Codification(data);

// Translate our training data into integer symbols using our codebook:
DataTable symbols = codebook.Apply(data); 
int[][] inputs  = symbols.ToIntArray("Outlook", "Temperature", "Humidity", "Wind"); 
int[]   outputs = symbols.ToIntArray("PlayTennis").GetColumn(0);</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EDCAAAAA');</script><p>
               Now that we already have our learning input/ouput pairs, we should specify our
               decision tree. We will be trying to build a tree to predict the last column, entitled
               “PlayTennis”. For this, we will be using the “Outlook”, “Temperature”, “Humidity” and
               “Wind” as predictors (variables which will we will use for our decision). Since those
               are categorical, we must specify, at the moment of creation of our tree, the
               number of each possible symbol for those variables.
             </p><div id="ID0EBCAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EBCAAAAA_tabs"></div><div id="ID0EBCAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EBCAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EBCAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EBCAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EBCAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EBCAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EBCAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EBCAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">// Gather information about decision variables</span> 
<span class="highlight-keyword">int</span>[] symbolCounts =
{
  codebook[<span class="highlight-literal">"Outlook"</span>].Symbols,     <span class="highlight-comment">// 3 possible values (Sunny, overcast, rain)</span>
  codebook[<span class="highlight-literal">"Temperature"</span>].Symbols, <span class="highlight-comment">// 3 possible values (Hot, mild, cool)</span>
  codebook[<span class="highlight-literal">"Humidity"</span>].Symbols,    <span class="highlight-comment">// 2 possible values (High, normal)</span>
  codebook[<span class="highlight-literal">"Wind"</span>].Symbols         <span class="highlight-comment">// 2 possible values (Weak, strong)</span>
};

<span class="highlight-keyword">int</span> classCount = codebook[<span class="highlight-literal">"PlayTennis"</span>].Symbols; <span class="highlight-comment">// 2 possible values (yes, no)</span> 

<span class="highlight-comment">// Create a new Naive Bayes classifiers for the two classes</span>
NaiveBayes target = <span class="highlight-keyword">new</span> NaiveBayes(classCount, symbolCounts);

<span class="highlight-comment">// Compute the Naive Bayes model</span>
target.Estimate(inputs, outputs);</pre></div><div id="ID0EBCAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>// Gather information about decision variables 
int[] symbolCounts =
{
  codebook["Outlook"].Symbols,     // 3 possible values (Sunny, overcast, rain)
  codebook["Temperature"].Symbols, // 3 possible values (Hot, mild, cool)
  codebook["Humidity"].Symbols,    // 2 possible values (High, normal)
  codebook["Wind"].Symbols         // 2 possible values (Weak, strong)
};

int classCount = codebook["PlayTennis"].Symbols; // 2 possible values (yes, no) 

// Create a new Naive Bayes classifiers for the two classes
NaiveBayes target = new NaiveBayes(classCount, symbolCounts);

// Compute the Naive Bayes model
target.Estimate(inputs, outputs);</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EBCAAAAA');</script><p>Now that we have created and estimated our classifier, we 
             can query the classifier for new input samples through the <a href="M_Accord_MachineLearning_Bayes_NaiveBayes_Compute.htm" target="">Compute(<span id="ID0EDBACAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDBACAAAAA?vb=|cpp=array&lt;|cs=|fs=|nu=");
				</script>Int32<span id="ID0EBBACAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBBACAAAAA?vb=()|cpp=&gt;|cs=[]|fs=[]|nu=[]");
				</script>)</a> method.</p><a name="seeAlsoSection"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div class="seeAlsoStyle"><a href="AllMembers_T_Accord_MachineLearning_Bayes_NaiveBayes.htm" target="">NaiveBayes Members</a></div><div class="seeAlsoStyle"><a href="N_Accord_MachineLearning_Bayes.htm" target="">Accord.MachineLearning.Bayes Namespace</a></div><div class="seeAlsoStyle"><a href="T_Accord_MachineLearning_Bayes_NaiveBayes_1.htm" target="">Accord.MachineLearning.Bayes<span id="ID0EEAAAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EEAAAAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>NaiveBayes<span id="ID0ECAAAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECAAAAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TDistribution<span id="ID0EAAAAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAAAAAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></div></div>
        </div>
      </div>
    </div>
    <div id="OH_footer" class="OH_footer">
      <p>
        <a href="http://accord.googlecode.com" target="_blank">Accord.NET Framework</a> © 2009-2013. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.</p>
      <div class="OH_feedbacklink">
        <a href="mailto:?subject=Accord.NET+Framework+NaiveBayes+Class+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic.</div>
    </div>
  </body>
</html>