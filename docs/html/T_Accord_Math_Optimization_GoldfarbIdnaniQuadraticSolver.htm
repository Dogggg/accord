<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp">
  <head>
    <link rel="SHORTCUT ICON" href="./../icons/favicon.ico" />
    <style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style>
    <link rel="stylesheet" type="text/css" href="./../Styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="./../Styles/branding-en-US.css" />
    <style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style>
    <script src="./../Scripts/branding.js" type="text/javascript">
      <!---->
    </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>GoldfarbIdnaniQuadraticSolver Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="GoldfarbIdnaniQuadraticSolver class" />
    <meta name="System.Keywords" content="Accord.Math.Optimization.GoldfarbIdnaniQuadraticSolver class" />
    <meta name="System.Keywords" content="GoldfarbIdnaniQuadraticSolver class, about GoldfarbIdnaniQuadraticSolver class" />
    <meta name="Microsoft.Help.F1" content="Accord.Math.Optimization.GoldfarbIdnaniQuadraticSolver" />
    <meta name="Microsoft.Help.Id" content="T:Accord.Math.Optimization.GoldfarbIdnaniQuadraticSolver" />
    <meta name="Description" content="Goldfarb-Idnani Quadratic Programming Solver." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="'true'" />
    <meta name="container" content="Accord.Math.Optimization" />
    <meta name="file" content="T_Accord_Math_Optimization_GoldfarbIdnaniQuadraticSolver" />
    <meta name="guid" content="T_Accord_Math_Optimization_GoldfarbIdnaniQuadraticSolver" />
    
    <link type="text/css" rel="stylesheet" href="./../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js">
      <!---->
    </script>
    <meta name="SelfBranded" content="true" />
  </head>
  <body onload="onLoad()" class="primary-mtps-offline-document">
    <div class="OH_outerDiv">
      <div class="OH_outerContent">
        <div class="OH_topic">
          <div class="OH_title">
            <table>
              <tr>
                <td class="OH_tdTitleColumn">GoldfarbIdnaniQuadraticSolver Class</td>
                <td class="OH_tdLogoColumn">
                  <img align="right" src="./../icons/Accord.NET.png" />
                </td>
              </tr>
            </table>
          </div>
        </div>
        <div class="OH_feedbacklink">
          <a href="mailto:?subject=Accord.NET+Framework+GoldfarbIdnaniQuadraticSolver+Class+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a>
        </div>
        <div id="mainSection">
          <div id="mainBody">
            <span class="introStyle">
              <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
              <a href="http://accord.googlecode.com/svn/docs/Index.html" target="_top">Show table of contents (goes to the online documentation index).</a>
              <br />
            </span>
            <div class="summary">
               Goldfarb-Idnani Quadratic Programming Solver.
             </div>
            <div class="OH_CollapsibleAreaRegion">
              <div class="OH_regiontitle">Inheritance Hierarchy</div>
              <div class="OH_CollapsibleArea_HrDiv">
                <hr class="OH_CollapsibleArea_Hr" />
              </div>
            </div>
            <div class="OH_clear"></div>
            <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
            <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="ID0EBEOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBEOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>Object</a>
            <br />  <span class="selflink">Accord.Math.Optimization<span id="ID0EBBOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBBOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>GoldfarbIdnaniQuadraticSolver</span><br /><p></p><b>Namespace:</b> <a href="N_Accord_Math_Optimization.htm" target="">Accord.Math.Optimization</a><br /><b>Assembly:</b> <span sdata="assembly">Accord.Math</span> (in Accord.Math.dll) Version: 2.8.0.0 (2.8.0.0)<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div id="snippetGroup_Syntax" class="code"><div id="ID0EAAEAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EAAEAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EAAEAAAAA_tabimgleft"></div><div id="ID0EAAEAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EAAEAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EAAEAAAAA_tab2" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>VB</a></div><div id="ID0EAAEAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EAAEAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EAAEAAAAA_tabimgright"></div></div><div id="ID0EAAEAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAEAAAAA_ViewColorized" href="javascript:ExchangeTitleContent('ID0EAAEAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EAAEAAAAA_copycode" href="javascript:CopyToClipboard('ID0EAAEAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EAAEAAAAA_PrintText" class="OH_PrintText" href="javascript:Print('ID0EAAEAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EAAEAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">GoldfarbIdnaniQuadraticSolver</span></pre></div><div id="ID0EAAEAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>public class GoldfarbIdnaniQuadraticSolver</pre></div><div id="ID0EAAEAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EAAEAAAAA');</script></div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><p>
               References:
               <ul><li><img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" /><a href="http://www.javaquant.net/papers/GoldfarbIdnani.pdf" target="_blank">
                   Goldfarb D., Idnani A. (1982) Dual and Primal-Dual Methods for Solving Strictly Convex Quadratic Programs.
                   Available on: http://www.javaquant.net/papers/GoldfarbIdnani.pdf .</a></li><li><img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" /><a href="http://www.javaquant.net/papers/GoldfarbIdnani.pdf" target="_blank">
                   Berwin A Turlach. QuadProg, Quadratic Programming Solver (implementation in Fortran).
                   Available on:  http://school.maths.uwa.edu.au/~berwin/software/quadprog.html .</a></li></ul></p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><p>
               There are three ways to state a quadratic programming problem in this framework.</p><ul><li>
               The first is to state the problem in its canonical form, explicitly stating the
               matrix Q and vector d specifying the quadratic function and the matrices A and
               vector b specifying the problem constraints.</li><li>
               The second is to state the problem with lambda expressions using symbolic variables.</li><li>
               The third is to state the problem using text strings.</li></ul><p>  
               In the following section we will provide examples for those ways. 
             </p><p>
               This is an example stating the problem using lambdas:</p><div id="ID0EECAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EECAAAAA_tabs"></div><div id="ID0EECAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EECAAAAA_ViewColorized" href="javascript:ExchangeTitleContent('ID0EECAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EECAAAAA_copycode" href="javascript:CopyToClipboard('ID0EECAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EECAAAAA_PrintText" class="OH_PrintText" href="javascript:Print('ID0EECAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EECAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">// Solve the following optimization problem:</span> 
<span class="highlight-comment">// </span> 
<span class="highlight-comment">//  min f(x) = 2x² - xy + 4y² - 5x - 6y</span> 
<span class="highlight-comment">// </span> 
<span class="highlight-comment">//  s.t.   x - y  ==   5  (x minus y should be equal to 5)</span> 
<span class="highlight-comment">//             x  &gt;=  10  (x should be greater than or equal to 10)</span> 
<span class="highlight-comment">// </span> 

<span class="highlight-comment">// In this example we will be using some symbolic processing. </span> 
<span class="highlight-comment">// The following variables could be inicialized to any value.</span> 
<span class="highlight-keyword">double</span> x = <span class="highlight-number">0</span>, y = <span class="highlight-number">0</span>;

<span class="highlight-comment">// Create our objective function using a lambda expression</span> 
<span class="highlight-keyword">var</span> f = <span class="highlight-keyword">new</span> QuadraticObjectiveFunction(() =&gt; <span class="highlight-number">2</span> * (x * x) - (x * y) + <span class="highlight-number">4</span> * (y * y) - <span class="highlight-number">5</span> * x - <span class="highlight-number">6</span> * y);

<span class="highlight-comment">// Now, create the constraints</span>
List&lt;LinearConstraint&gt; constraints = <span class="highlight-keyword">new</span> List&lt;LinearConstraint&gt;();
constraints.Add(<span class="highlight-keyword">new</span> LinearConstraint(f, () =&gt; x - y == <span class="highlight-number">5</span>));
constraints.Add(<span class="highlight-keyword">new</span> LinearConstraint(f, () =&gt; x &gt;= <span class="highlight-number">10</span>));

<span class="highlight-comment">// Now we create the quadratic programming solver for 2 variables, using the constraints.</span>
GoldfarbIdnaniQuadraticSolver solver = <span class="highlight-keyword">new</span> GoldfarbIdnaniQuadraticSolver(<span class="highlight-number">2</span>, constraints);

<span class="highlight-comment">// And attempt to solve it.</span> 
<span class="highlight-keyword">double</span> minimumValue = solver.Minimize(f);</pre></div><div id="ID0EECAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>// Solve the following optimization problem: 
//  
//  min f(x) = 2x² - xy + 4y² - 5x - 6y 
//  
//  s.t.   x - y  ==   5  (x minus y should be equal to 5) 
//             x  &gt;=  10  (x should be greater than or equal to 10) 
//  

// In this example we will be using some symbolic processing.  
// The following variables could be inicialized to any value. 
double x = 0, y = 0;

// Create our objective function using a lambda expression 
var f = new QuadraticObjectiveFunction(() =&gt; 2 * (x * x) - (x * y) + 4 * (y * y) - 5 * x - 6 * y);

// Now, create the constraints
List&lt;LinearConstraint&gt; constraints = new List&lt;LinearConstraint&gt;();
constraints.Add(new LinearConstraint(f, () =&gt; x - y == 5));
constraints.Add(new LinearConstraint(f, () =&gt; x &gt;= 10));

// Now we create the quadratic programming solver for 2 variables, using the constraints.
GoldfarbIdnaniQuadraticSolver solver = new GoldfarbIdnaniQuadraticSolver(2, constraints);

// And attempt to solve it. 
double minimumValue = solver.Minimize(f);</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EECAAAAA');</script><p>
               This is an example stating the problem using strings:</p><div id="ID0ECCAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0ECCAAAAA_tabs"></div><div id="ID0ECCAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0ECCAAAAA_ViewColorized" href="javascript:ExchangeTitleContent('ID0ECCAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0ECCAAAAA_copycode" href="javascript:CopyToClipboard('ID0ECCAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0ECCAAAAA_PrintText" class="OH_PrintText" href="javascript:Print('ID0ECCAAAAA','4')" title="Print">Print</a></div></div><div id="ID0ECCAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">// Solve the following optimization problem:</span> 
<span class="highlight-comment">// </span> 
<span class="highlight-comment">//  max f(x) = -2x² + xy - y² + 5y</span> 
<span class="highlight-comment">// </span> 
<span class="highlight-comment">//  s.t.   x - y  ==   5  (x minus y should be equal to 5)</span> 
<span class="highlight-comment">//             x  &gt;=  10  (x should be greater than or equal to 10)</span> 
<span class="highlight-comment">// </span> 
<span class="highlight-comment">// </span> 

<span class="highlight-comment">// Create our objective function using a text string</span> 
<span class="highlight-keyword">var</span> f = <span class="highlight-keyword">new</span> QuadraticObjectiveFunction(<span class="highlight-literal">"-2x² + xy - y² + 5y"</span>);

<span class="highlight-comment">// Now, create the constraints</span>
List&lt;LinearConstraint&gt; constraints = <span class="highlight-keyword">new</span> List&lt;LinearConstraint&gt;();
constraints.Add(<span class="highlight-keyword">new</span> LinearConstraint(f, <span class="highlight-literal">"x - y ==  5"</span>));
constraints.Add(<span class="highlight-keyword">new</span> LinearConstraint(f, <span class="highlight-literal">"    x &gt;= 10"</span>));

<span class="highlight-comment">// Now we create the quadratic programming solver for 2 variables, using the constraints.</span>
GoldfarbIdnaniQuadraticSolver solver = <span class="highlight-keyword">new</span> GoldfarbIdnaniQuadraticSolver(<span class="highlight-number">2</span>, constraints);

<span class="highlight-comment">// And attempt to solve it.</span> 
<span class="highlight-keyword">double</span> maxValue = solver.Maximize(f);</pre></div><div id="ID0ECCAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>// Solve the following optimization problem: 
//  
//  max f(x) = -2x² + xy - y² + 5y 
//  
//  s.t.   x - y  ==   5  (x minus y should be equal to 5) 
//             x  &gt;=  10  (x should be greater than or equal to 10) 
//  
//  

// Create our objective function using a text string 
var f = new QuadraticObjectiveFunction("-2x² + xy - y² + 5y");

// Now, create the constraints
List&lt;LinearConstraint&gt; constraints = new List&lt;LinearConstraint&gt;();
constraints.Add(new LinearConstraint(f, "x - y ==  5"));
constraints.Add(new LinearConstraint(f, "    x &gt;= 10"));

// Now we create the quadratic programming solver for 2 variables, using the constraints.
GoldfarbIdnaniQuadraticSolver solver = new GoldfarbIdnaniQuadraticSolver(2, constraints);

// And attempt to solve it. 
double maxValue = solver.Maximize(f);</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0ECCAAAAA');</script><p>
               And finally, an example stating the problem using matrices:</p><div id="ID0EACAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EACAAAAA_tabs"></div><div id="ID0EACAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EACAAAAA_ViewColorized" href="javascript:ExchangeTitleContent('ID0EACAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EACAAAAA_copycode" href="javascript:CopyToClipboard('ID0EACAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EACAAAAA_PrintText" class="OH_PrintText" href="javascript:Print('ID0EACAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EACAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">// Solve the following optimization problem:</span> 
<span class="highlight-comment">// </span> 
<span class="highlight-comment">//  min f(x) = 2x² - xy + 4y² - 5x - 6y</span> 
<span class="highlight-comment">// </span> 
<span class="highlight-comment">//  s.t.   x - y  ==   5  (x minus y should be equal to 5)</span> 
<span class="highlight-comment">//             x  &gt;=  10  (x should be greater than or equal to 10)</span> 
<span class="highlight-comment">// </span> 

<span class="highlight-comment">// Lets first group the quadratic and linear terms. The</span> 
<span class="highlight-comment">// quadratic terms are +2x², +3y² and -4xy. The linear </span> 
<span class="highlight-comment">// terms are -2x and +1y. So our matrix of quadratic</span> 
<span class="highlight-comment">// terms can be expressed as:</span> 

<span class="highlight-keyword">double</span>[,] Q = <span class="highlight-comment">// 2x² -1xy +4y²</span>
{   
    <span class="highlight-comment">/*           x              y      */</span> 
    <span class="highlight-comment">/*x*/</span> { <span class="highlight-number">+2</span> <span class="highlight-comment">/*xx*/</span> *<span class="highlight-number">2</span>,  <span class="highlight-number">-1</span> <span class="highlight-comment">/*xy*/</span>    }, 
    <span class="highlight-comment">/*y*/</span> { <span class="highlight-number">-1</span> <span class="highlight-comment">/*xy*/</span>   ,  <span class="highlight-number">+4</span> <span class="highlight-comment">/*yy*/</span> *<span class="highlight-number">2</span> },
};

<span class="highlight-comment">// Accordingly, our vector of linear terms is given by:</span> 

<span class="highlight-keyword">double</span>[] d = { <span class="highlight-number">-5</span> <span class="highlight-comment">/*x*/</span>, <span class="highlight-number">-6</span> <span class="highlight-comment">/*y*/</span> }; <span class="highlight-comment">// -5x -6y</span> 

<span class="highlight-comment">// We have now to express our constraints. We can do it</span> 
<span class="highlight-comment">// either by directly specifying a matrix A in which each</span> 
<span class="highlight-comment">// line refers to one of the constraints, expressing the</span> 
<span class="highlight-comment">// relationship between the different variables in the</span> 
<span class="highlight-comment">// constraint, like this:</span> 

<span class="highlight-keyword">double</span>[,] A = 
{
    { <span class="highlight-number">1</span>, <span class="highlight-number">-1</span> }, <span class="highlight-comment">// This line says that x + (-y) ... (a)</span>
    { <span class="highlight-number">1</span>,  <span class="highlight-number">0</span> }, <span class="highlight-comment">// This line says that x alone  ... (b)</span>
};

<span class="highlight-keyword">double</span>[] b = 
{
     <span class="highlight-number">5</span>, <span class="highlight-comment">// (a) ... should be equal to 5.</span> 
    <span class="highlight-number">10</span>, <span class="highlight-comment">// (b) ... should be greater than or equal to 10.</span>
};

<span class="highlight-comment">// Equalities must always come first, and in this case</span> 
<span class="highlight-comment">// we have to specify how many of the contraints are</span> 
<span class="highlight-comment">// actually equalities:</span> 

<span class="highlight-keyword">int</span> numberOfEqualities = <span class="highlight-number">1</span>;


<span class="highlight-comment">// Alternatively, we may use a more explicitly form:</span>
List&lt;LinearConstraint&gt; list = <span class="highlight-keyword">new</span> List&lt;LinearConstraint&gt;();

<span class="highlight-comment">// Define the first constraint, which involves only x</span>
list.Add(<span class="highlight-keyword">new</span> LinearConstraint(numberOfVariables: <span class="highlight-number">1</span>)
    {
        <span class="highlight-comment">// x is the first variable, thus located at</span> 
        <span class="highlight-comment">// index 0. We are specifying that x &gt;= 10:</span>

        VariablesAtIndices = <span class="highlight-keyword">new</span>[] { <span class="highlight-number">0</span> }, <span class="highlight-comment">// index 0 (x)</span>
        ShouldBe = ConstraintType.GreaterThanOrEqualTo,
        Value = <span class="highlight-number">10</span>
    });

<span class="highlight-comment">// Define the second constraint, which involves x and y</span>
list.Add(<span class="highlight-keyword">new</span> LinearConstraint(numberOfVariables: <span class="highlight-number">2</span>)
    {
        <span class="highlight-comment">// x is the first variable, located at index 0, and y is</span> 
        <span class="highlight-comment">// the second, thus located at 1. We are specifying that</span> 
        <span class="highlight-comment">// x - y = 5 by saying that the variable at position 0 </span> 
        <span class="highlight-comment">// times 1 plus the variable at position 1 times -1 </span> 
        <span class="highlight-comment">// should be equal to 5.</span>

        VariablesAtIndices = <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">// index 0 (x) and index 1 (y)</span>
        CombinedAs = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">-1</span> }, <span class="highlight-comment">// when combined as x - y</span>
        ShouldBe = ConstraintType.EqualTo,
        Value = <span class="highlight-number">5</span>
    });


<span class="highlight-comment">// Now we can finally create our optimization problem</span> 
<span class="highlight-keyword">var</span> target = <span class="highlight-keyword">new</span> GoldfarbIdnaniQuadraticSolver(numberOfVariables: <span class="highlight-number">2</span>, constraints: list);

<span class="highlight-comment">// And attempt to solve it.</span> 
<span class="highlight-keyword">double</span> minimumValue = target.Minimize(Q, d);</pre></div><div id="ID0EACAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>// Solve the following optimization problem: 
//  
//  min f(x) = 2x² - xy + 4y² - 5x - 6y 
//  
//  s.t.   x - y  ==   5  (x minus y should be equal to 5) 
//             x  &gt;=  10  (x should be greater than or equal to 10) 
//  

// Lets first group the quadratic and linear terms. The 
// quadratic terms are +2x², +3y² and -4xy. The linear  
// terms are -2x and +1y. So our matrix of quadratic 
// terms can be expressed as: 

double[,] Q = // 2x² -1xy +4y²
{   
    /*           x              y      */ 
    /*x*/ { +2 /*xx*/ *2,  -1 /*xy*/    }, 
    /*y*/ { -1 /*xy*/   ,  +4 /*yy*/ *2 },
};

// Accordingly, our vector of linear terms is given by: 

double[] d = { -5 /*x*/, -6 /*y*/ }; // -5x -6y 

// We have now to express our constraints. We can do it 
// either by directly specifying a matrix A in which each 
// line refers to one of the constraints, expressing the 
// relationship between the different variables in the 
// constraint, like this: 

double[,] A = 
{
    { 1, -1 }, // This line says that x + (-y) ... (a)
    { 1,  0 }, // This line says that x alone  ... (b)
};

double[] b = 
{
     5, // (a) ... should be equal to 5. 
    10, // (b) ... should be greater than or equal to 10.
};

// Equalities must always come first, and in this case 
// we have to specify how many of the contraints are 
// actually equalities: 

int numberOfEqualities = 1;


// Alternatively, we may use a more explicitly form:
List&lt;LinearConstraint&gt; list = new List&lt;LinearConstraint&gt;();

// Define the first constraint, which involves only x
list.Add(new LinearConstraint(numberOfVariables: 1)
    {
        // x is the first variable, thus located at 
        // index 0. We are specifying that x &gt;= 10:

        VariablesAtIndices = new[] { 0 }, // index 0 (x)
        ShouldBe = ConstraintType.GreaterThanOrEqualTo,
        Value = 10
    });

// Define the second constraint, which involves x and y
list.Add(new LinearConstraint(numberOfVariables: 2)
    {
        // x is the first variable, located at index 0, and y is 
        // the second, thus located at 1. We are specifying that 
        // x - y = 5 by saying that the variable at position 0  
        // times 1 plus the variable at position 1 times -1  
        // should be equal to 5.

        VariablesAtIndices = new int[] { 0, 1 }, // index 0 (x) and index 1 (y)
        CombinedAs = new double[] { 1, -1 }, // when combined as x - y
        ShouldBe = ConstraintType.EqualTo,
        Value = 5
    });


// Now we can finally create our optimization problem 
var target = new GoldfarbIdnaniQuadraticSolver(numberOfVariables: 2, constraints: list);

// And attempt to solve it. 
double minimumValue = target.Minimize(Q, d);</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EACAAAAA');</script><a name="seeAlsoSection"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div class="seeAlsoStyle"><a href="AllMembers_T_Accord_Math_Optimization_GoldfarbIdnaniQuadraticSolver.htm" target="">GoldfarbIdnaniQuadraticSolver Members</a></div><div class="seeAlsoStyle"><a href="N_Accord_Math_Optimization.htm" target="">Accord.Math.Optimization Namespace</a></div></div>
        </div>
      </div>
    </div>
    <div id="OH_footer" class="OH_footer">
      <p>
        <a href="http://accord.googlecode.com" target="_blank">Accord.NET Framework</a> © 2009-2012. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.</p>
      <div class="OH_feedbacklink">
        <a href="mailto:?subject=Accord.NET+Framework+GoldfarbIdnaniQuadraticSolver+Class+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic.</div>
    </div>
  </body>
</html>