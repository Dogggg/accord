<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>PrincipalComponentAnalysis Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="PrincipalComponentAnalysis class" />
    <meta name="System.Keywords" content="Accord.Statistics.Analysis.PrincipalComponentAnalysis class" />
    <meta name="System.Keywords" content="PrincipalComponentAnalysis class, about PrincipalComponentAnalysis class" />
    <meta name="Microsoft.Help.F1" content="Accord.Statistics.Analysis.PrincipalComponentAnalysis" />
    <meta name="Microsoft.Help.Id" content="T:Accord.Statistics.Analysis.PrincipalComponentAnalysis" />
    <meta name="Description" content="Principal component analysis (PCA) is a technique used to reduce multidimensional data sets to lower dimensions for analysis." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <link rel="stylesheet" type="text/css" href="../styles/Presentation.css" />
    <link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <script type="text/javascript" src="../scripts/EventUtilities.js"> </script>
    <script type="text/javascript" src="../scripts/SplitScreen.js"> </script>
    <script type="text/javascript" src="../scripts/Dropdown.js"> </script>
    <script type="text/javascript" src="../scripts/script_manifold.js"> </script>
    <script type="text/javascript" src="../scripts/script_feedBack.js"> </script>
    <script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script>
    <script type="text/javascript" src="../scripts/CommonUtilities.js"> </script>
    <meta name="container" content="Accord.Statistics.Analysis" />
    <meta name="file" content="T_Accord_Statistics_Analysis_PrincipalComponentAnalysis" />
    <meta name="guid" content="T_Accord_Statistics_Analysis_PrincipalComponentAnalysis" />
    <xml>
      <MSHelp:Attr Name="AssetID" Value="T:Accord.Statistics.Analysis.PrincipalComponentAnalysis" />
      <MSHelp:TOCTitle Title="PrincipalComponentAnalysis Class" />
      <MSHelp:RLTitle Title="PrincipalComponentAnalysis Class (Accord.Statistics.Analysis)" />
      <MSHelp:Keyword Index="A" Term="T:Accord.Statistics.Analysis.PrincipalComponentAnalysis" />
      <MSHelp:Keyword Index="A" Term="frlrfAccordStatisticsAnalysisPrincipalComponentAnalysisClassTopic" />
      <MSHelp:Keyword Index="K" Term="PrincipalComponentAnalysis class" />
      <MSHelp:Keyword Index="K" Term="Accord.Statistics.Analysis.PrincipalComponentAnalysis class" />
      <MSHelp:Keyword Index="K" Term="PrincipalComponentAnalysis class, about PrincipalComponentAnalysis class" />
      <MSHelp:Keyword Index="F" Term="Accord.Statistics.Analysis.PrincipalComponentAnalysis" />
      <MSHelp:Attr Name="HelpPriority" Value="2" />
      <MSHelp:Attr Name="APIType" Value="Managed" />
      <MSHelp:Attr Name="APILocation" Value="Accord.Statistics.dll" />
      <MSHelp:Attr Name="APIName" Value="Accord.Statistics.Analysis.PrincipalComponentAnalysis" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLang" Value="VB" />
      <MSHelp:Attr Name="Locale" Value="en-us" />
      <MSHelp:Attr Name="TopicType" Value="kbSyntax" />
      <MSHelp:Attr Name="TopicType" Value="apiref" />
      <MSHelp:Attr Name="Abstract" Value="Principal component analysis (PCA) is a technique used to reduce multidimensional data sets to lower dimensions for analysis." />
      <MSHelp:Attr Name="AssemblyVersion" Value="2.6.1.0" />
    </xml>
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"> </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <input type="hidden" id="hiddenScrollOffset" />
    <img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" />
    <img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" />
    <img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" />
    <img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" />
    <img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" />
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" />
    <img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" />
    <img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" />
    <div id="header">
      <table cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <table id="topTable" cellspacing="0" cellpadding="0">
              <tr>
                <td>
                  <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0">
                    <img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span>
                  <span>    </span>
                  <span id="devlangsDropdown" class="filter" tabindex="0">
                    <img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: All </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Multiple </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: C# </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual Basic </nobr></label></span>
                </td>
              </tr>
            </table>
            <div id="devlangsMenu">
              <input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
              <label class="checkboxLabel" for="CSharpCheckbox">C#</label>
              <br />
              <input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" />
              <label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label>
              <br />
            </div>
            <table id="bottomTable" cellpadding="0" cellspacing="0">
              <tr id="headerTableRow1">
                <td align="left">
                  <span id="runningHeaderText">Accord.NET Framework</span>
                </td>
              </tr>
              <tr id="headerTableRow2">
                <td align="left">
                  <span id="nsrTitle">PrincipalComponentAnalysis Class</span>
                </td>
              </tr>
              <tr id="headerTableRow3">
                <td align="left">
                  <a href="AllMembers_T_Accord_Statistics_Analysis_PrincipalComponentAnalysis.htm">Members</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('','Accord.NET Framework','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td>
              </tr>
            </table>
          </td>
          <td align="center" style="width: 1px; padding: 0px">
            <img src="../icons/Accord.NET.png" />
          </td>
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" />
        <span style="color: DarkGray"></span>
        <div class="summary">
               Principal component analysis (PCA) is a technique used to reduce
               multidimensional data sets to lower dimensions for analysis.
             </div>
        <p />
        <b>Namespace:</b> <a href="N_Accord_Statistics_Analysis.htm">Accord.Statistics.Analysis</a><br /><b>Assembly:</b> <span sdata="assembly">Accord.Statistics</span> (in Accord.Statistics.dll) Version: 2.6.1.0 (2.6.1.0)<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve">[<a href="http://msdn2.microsoft.com/en-us/library/bcfsa90a" target="_blank">SerializableAttribute</a>]
<span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">PrincipalComponentAnalysis</span> : <a href="T_Accord_Statistics_Analysis_IProjectionAnalysis.htm">IProjectionAnalysis</a>, 
	<a href="T_Accord_Statistics_Analysis_IMultivariateAnalysis.htm">IMultivariateAnalysis</a>, <a href="T_Accord_Statistics_Analysis_IAnalysis.htm">IAnalysis</a></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve">&lt;<a href="http://msdn2.microsoft.com/en-us/library/bcfsa90a" target="_blank">SerializableAttribute</a>&gt; _
<span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">PrincipalComponentAnalysis</span> _
	<span class="keyword">Implements</span> <a href="T_Accord_Statistics_Analysis_IProjectionAnalysis.htm">IProjectionAnalysis</a>, <a href="T_Accord_Statistics_Analysis_IMultivariateAnalysis.htm">IMultivariateAnalysis</a>, <a href="T_Accord_Statistics_Analysis_IAnalysis.htm">IAnalysis</a></pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle, event)" tabindex="0"><img id="remarksToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style=""><p>
               Principal Components Analysis or the Karhunen-Loeve expansion is a
               classical method for dimensionality reduction or exploratory data
               analysis.</p><p>
               Mathematically, PCA is a process that decomposes the covariance matrix of a matrix
               into two parts: eigenvalues and column eigenvectors, whereas Singular Value Decomposition
               (SVD) decomposes a matrix per se into three parts: singular values, column eigenvectors,
               and row eigenvectors. The relationships between PCA and SVD lie in that the eigenvalues 
               are the square of the singular values and the column vectors are the same for both.</p><p>
               This class uses SVD on the data set which generally gives better numerical accuracy.</p></div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><p>
                The example below shows a typical usage of the analysis. However, users
                often ask why the framework produces different values than other packages
                such as STATA or MATLAB. After the simple introductory example below, we
                will be exploring why those results are often different.</p><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Below is the same data used on the excellent paper "Tutorial</span>
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//   On Principal Component Analysis", by Lindsay Smith (2002).</span>
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">double</span>[,] sourceMatrix = 
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">2.5</span>,  <span class="highlight-number">2.4</span> },
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">0.5</span>,  <span class="highlight-number">0.7</span> },
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">2.2</span>,  <span class="highlight-number">2.9</span> },
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">1.9</span>,  <span class="highlight-number">2.2</span> },
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">3.1</span>,  <span class="highlight-number">3.0</span> },
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">2.3</span>,  <span class="highlight-number">2.7</span> },
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">2.0</span>,  <span class="highlight-number">1.6</span> },
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">1.0</span>,  <span class="highlight-number">1.1</span> },
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">1.5</span>,  <span class="highlight-number">1.6</span> },
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">1.1</span>,  <span class="highlight-number">0.9</span> }
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>}; 
<span class="highlight-lineno">16</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">17</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Creates the Principal Component Analysis of the given source</span>
<span class="highlight-lineno">18</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>var pca = <span class="highlight-keyword">new</span> PrincipalComponentAnalysis(sourceMatrix, AnalysisMethod.Center);
<span class="highlight-lineno">19</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">20</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Compute the Principal Component Analysis</span>
<span class="highlight-lineno">21</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>pca.Compute();
<span class="highlight-lineno">22</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">23</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Creates a projection considering 80% of the information</span>
<span class="highlight-lineno">24</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">double</span>[,] components = pca.Transform(sourceMatrix, <span class="highlight-number">0.8</span>f, <span class="highlight-keyword">true</span>);</pre></div></span><p>
                A question often asked by users is "why my matrices have inverted
                signs" or "why my results differ from [another software]". In short,
                despite any differences, the results are most likely correct (unless
                you firmly believes you have found a bug; in this case, please fill 
                in a bug report). </p><p>
                The example below explores, in the same steps given in Lindsay's
                tutorial, anything that would cause any discrepancies between the
                results given by Accord.NET and results given by other softwares.</p><span id="cbc_2" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-lineno">  1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Reproducing Lindsay Smith's "Tutorial on Principal Component Analysis"</span>
<span class="highlight-lineno">  2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// using the framework's default method. The tutorial can be found online</span>
<span class="highlight-lineno">  3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// at http://www.sccg.sk/~haladova/principal_components.pdf</span>
<span class="highlight-lineno">  4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">  5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Step 1. Get some data</span>
<span class="highlight-lineno">  6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// ---------------------</span>
<span class="highlight-lineno">  7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">  8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">double</span>[,] data = 
<span class="highlight-lineno">  9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno"> 10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">2.5</span>,  <span class="highlight-number">2.4</span> },
<span class="highlight-lineno"> 11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">0.5</span>,  <span class="highlight-number">0.7</span> },
<span class="highlight-lineno"> 12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">2.2</span>,  <span class="highlight-number">2.9</span> },
<span class="highlight-lineno"> 13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">1.9</span>,  <span class="highlight-number">2.2</span> },
<span class="highlight-lineno"> 14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">3.1</span>,  <span class="highlight-number">3.0</span> },
<span class="highlight-lineno"> 15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">2.3</span>,  <span class="highlight-number">2.7</span> },
<span class="highlight-lineno"> 16</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">2.0</span>,  <span class="highlight-number">1.6</span> },
<span class="highlight-lineno"> 17</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">1.0</span>,  <span class="highlight-number">1.1</span> },
<span class="highlight-lineno"> 18</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">1.5</span>,  <span class="highlight-number">1.6</span> },
<span class="highlight-lineno"> 19</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">1.1</span>,  <span class="highlight-number">0.9</span> }
<span class="highlight-lineno"> 20</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>};
<span class="highlight-lineno"> 21</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 22</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 23</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Step 2. Subtract the mean</span>
<span class="highlight-lineno"> 24</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// -------------------------</span>
<span class="highlight-lineno"> 25</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//   Note: The framework does this automatically. By default, the framework</span>
<span class="highlight-lineno"> 26</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//   uses the "Center" method, which only subtracts the mean. However, it is</span>
<span class="highlight-lineno"> 27</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//   also possible to remove the mean *and* divide by the standard deviation</span>
<span class="highlight-lineno"> 28</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//   (thus performing the correlation method) by specifying "Standardize"</span>
<span class="highlight-lineno"> 29</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//   instead of "Center" as the AnalysisMethod.</span>
<span class="highlight-lineno"> 30</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 31</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>AnalysisMethod method = AnalysisMethod.Center; <span class="highlight-comment">// AnalysisMethod.Standardize</span>
<span class="highlight-lineno"> 32</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 33</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 34</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Step 3. Compute the covariance matrix</span>
<span class="highlight-lineno"> 35</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// -------------------------------------</span>
<span class="highlight-lineno"> 36</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//   Note: Accord.NET does not need to compute the covariance</span>
<span class="highlight-lineno"> 37</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//   matrix in order to compute PCA. The framework uses the SVD</span>
<span class="highlight-lineno"> 38</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//   method which is more numerically stable, but may require</span>
<span class="highlight-lineno"> 39</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//   more processing or memory. In order to replicate the tutorial</span>
<span class="highlight-lineno"> 40</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//   using covariance matrices, please see the next example below.</span>
<span class="highlight-lineno"> 41</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 42</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Create the analysis using the selected method</span>
<span class="highlight-lineno"> 43</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>var pca = <span class="highlight-keyword">new</span> PrincipalComponentAnalysis(data, method);
<span class="highlight-lineno"> 44</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 45</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Compute it</span>
<span class="highlight-lineno"> 46</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>pca.Compute();
<span class="highlight-lineno"> 47</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 48</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 49</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Step 4. Compute the eigenvectors and eigenvalues of the covariance matrix</span>
<span class="highlight-lineno"> 50</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// -------------------------------------------------------------------------</span>
<span class="highlight-lineno"> 51</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//   Note: Since Accord.NET uses the SVD method rather than the Eigendecomposition</span>
<span class="highlight-lineno"> 52</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//   method, the Eigenvalues are not directly available. However, it is not the</span>
<span class="highlight-lineno"> 53</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//   Eigenvalues themselves which are important, but rather their proportion:</span>
<span class="highlight-lineno"> 54</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 55</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Those are the expected eigenvalues, in descending order:</span>
<span class="highlight-lineno"> 56</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">double</span>[] eigenvalues = { <span class="highlight-number">1.28402771</span>, <span class="highlight-number">0.0490833989</span> };
<span class="highlight-lineno"> 57</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 58</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// And this will be their proportion:</span>
<span class="highlight-lineno"> 59</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">double</span>[] proportion = eigenvalues.Divide(eigenvalues.Sum());
<span class="highlight-lineno"> 60</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 61</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Those are the expected eigenvectors,</span>
<span class="highlight-lineno"> 62</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// in descending order of eigenvalues:</span>
<span class="highlight-lineno"> 63</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">double</span>[,] eigenvectors =
<span class="highlight-lineno"> 64</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno"> 65</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">-0.677873399</span>, <span class="highlight-number">-0.735178656</span> },
<span class="highlight-lineno"> 66</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">-0.735178656</span>,  <span class="highlight-number">0.677873399</span> }
<span class="highlight-lineno"> 67</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>};
<span class="highlight-lineno"> 68</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 69</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Now, here is the place most users get confused. The fact is that</span>
<span class="highlight-lineno"> 70</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// the Eigenvalue decomposition (EVD) is not unique, and both the SVD</span>
<span class="highlight-lineno"> 71</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// and EVD routines used by the framework produces results which are</span>
<span class="highlight-lineno"> 72</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// numerically different from packages such as STATA or MATLAB, but</span>
<span class="highlight-lineno"> 73</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// those are correct.</span>
<span class="highlight-lineno"> 74</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 75</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// If v is an eigenvector, a multiple of this eigenvector (such as a*v, with</span>
<span class="highlight-lineno"> 76</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// a being a scalar) will also be an eigenvector. In the Lindsay case, the</span>
<span class="highlight-lineno"> 77</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// framework produces a first eigenvector with inverted signs. This is the same</span>
<span class="highlight-lineno"> 78</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// as considering a=-1 and taking a*v. The result is still correct.</span>
<span class="highlight-lineno"> 79</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 80</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Retrieve the first expected eigenvector</span>
<span class="highlight-lineno"> 81</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">double</span>[] v = eigenvectors.GetColumn(<span class="highlight-number">0</span>);
<span class="highlight-lineno"> 82</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 83</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Multiply by a scalar and store it back</span>
<span class="highlight-lineno"> 84</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>eigenvectors.SetColumn(<span class="highlight-number">0</span>, v.Multiply(<span class="highlight-number">-1</span>));
<span class="highlight-lineno"> 85</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 86</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// At this point, the eigenvectors should equal the pca.ComponentMatrix,</span>
<span class="highlight-lineno"> 87</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// and the proportion vector should equal the pca.ComponentProportions up</span>
<span class="highlight-lineno"> 88</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// to the 9 decimal places shown in the tutorial.</span>
<span class="highlight-lineno"> 89</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 90</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 91</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Step 5. Deriving the new data set</span>
<span class="highlight-lineno"> 92</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// ---------------------------------</span>
<span class="highlight-lineno"> 93</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 94</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">double</span>[,] actual = pca.Transform(data);
<span class="highlight-lineno"> 95</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 96</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// transformedData shown in pg. 18</span>
<span class="highlight-lineno"> 97</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">double</span>[,] expected = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[,]
<span class="highlight-lineno"> 98</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno"> 99</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {  <span class="highlight-number">0.827970186</span>, <span class="highlight-number">-0.175115307</span> },
<span class="highlight-lineno">100</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">-1.77758033</span>,   <span class="highlight-number">0.142857227</span> },
<span class="highlight-lineno">101</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {  <span class="highlight-number">0.992197494</span>,  <span class="highlight-number">0.384374989</span> },
<span class="highlight-lineno">102</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {  <span class="highlight-number">0.274210416</span>,  <span class="highlight-number">0.130417207</span> },
<span class="highlight-lineno">103</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {  <span class="highlight-number">1.67580142</span>,  <span class="highlight-number">-0.209498461</span> },
<span class="highlight-lineno">104</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {  <span class="highlight-number">0.912949103</span>,  <span class="highlight-number">0.175282444</span> },
<span class="highlight-lineno">105</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">-0.099109437</span>, <span class="highlight-number">-0.349824698</span> },
<span class="highlight-lineno">106</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">-1.14457216</span>,   <span class="highlight-number">0.046417258</span> },
<span class="highlight-lineno">107</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">-0.438046137</span>,  <span class="highlight-number">0.017764629</span> },
<span class="highlight-lineno">108</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">-1.22382056</span>,  <span class="highlight-number">-0.162675287</span> },
<span class="highlight-lineno">109</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>};
<span class="highlight-lineno">110</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">111</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// At this point, the actual and expected matrices</span>
<span class="highlight-lineno">112</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// should be equal up to 8 decimal places.</span></pre></div></span><p>
                Some users would like to analyze huge amounts of data. In this case,
                computing the SVD directly on the data could result in memory exceptions
                or excessive computing times. If your data's number of dimensions is much
                less than the number of observations (i.e. your matrix have less columns
                than rows) then it would be a better idea to summarize your data in the
                form of a covariance or correlation matrix and compute PCA using the EVD.</p><p>
                The example below shows how to compute the analysis with covariance
                matrices only.</p><span id="cbc_3" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-lineno">  1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Reproducing Lindsay Smith's "Tutorial on Principal Component Analysis"</span>
<span class="highlight-lineno">  2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// using the paper's original method. The tutorial can be found online</span>
<span class="highlight-lineno">  3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// at http://www.sccg.sk/~haladova/principal_components.pdf</span>
<span class="highlight-lineno">  4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">  5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Step 1. Get some data</span>
<span class="highlight-lineno">  6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// ---------------------</span>
<span class="highlight-lineno">  7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">  8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">double</span>[,] data = 
<span class="highlight-lineno">  9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno"> 10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">2.5</span>,  <span class="highlight-number">2.4</span> },
<span class="highlight-lineno"> 11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">0.5</span>,  <span class="highlight-number">0.7</span> },
<span class="highlight-lineno"> 12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">2.2</span>,  <span class="highlight-number">2.9</span> },
<span class="highlight-lineno"> 13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">1.9</span>,  <span class="highlight-number">2.2</span> },
<span class="highlight-lineno"> 14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">3.1</span>,  <span class="highlight-number">3.0</span> },
<span class="highlight-lineno"> 15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">2.3</span>,  <span class="highlight-number">2.7</span> },
<span class="highlight-lineno"> 16</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">2.0</span>,  <span class="highlight-number">1.6</span> },
<span class="highlight-lineno"> 17</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">1.0</span>,  <span class="highlight-number">1.1</span> },
<span class="highlight-lineno"> 18</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">1.5</span>,  <span class="highlight-number">1.6</span> },
<span class="highlight-lineno"> 19</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">1.1</span>,  <span class="highlight-number">0.9</span> }
<span class="highlight-lineno"> 20</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>};
<span class="highlight-lineno"> 21</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 22</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 23</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Step 2. Subtract the mean</span>
<span class="highlight-lineno"> 24</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// -------------------------</span>
<span class="highlight-lineno"> 25</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//   Note: The framework does this automatically </span>
<span class="highlight-lineno"> 26</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//   when computing the covariance matrix. In this</span>
<span class="highlight-lineno"> 27</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//   step we will only compute the mean vector.</span>
<span class="highlight-lineno"> 28</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 29</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">double</span>[] mean = Accord.Statistics.Tools.Mean(data);
<span class="highlight-lineno"> 30</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 31</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 32</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Step 3. Compute the covariance matrix</span>
<span class="highlight-lineno"> 33</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// -------------------------------------</span>
<span class="highlight-lineno"> 34</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 35</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">double</span>[,] covariance = Accord.Statistics.Tools.Covariance(data, mean);
<span class="highlight-lineno"> 36</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 37</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Create the analysis using the covariance matrix</span>
<span class="highlight-lineno"> 38</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>var pca = PrincipalComponentAnalysis.FromCovarianceMatrix(mean, covariance);
<span class="highlight-lineno"> 39</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 40</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Compute it</span>
<span class="highlight-lineno"> 41</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>pca.Compute();
<span class="highlight-lineno"> 42</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 43</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 44</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Step 4. Compute the eigenvectors and eigenvalues of the covariance matrix</span>
<span class="highlight-lineno"> 45</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//--------------------------------------------------------------------------</span>
<span class="highlight-lineno"> 46</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 47</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Those are the expected eigenvalues, in descending order:</span>
<span class="highlight-lineno"> 48</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">double</span>[] eigenvalues = { <span class="highlight-number">1.28402771</span>, <span class="highlight-number">0.0490833989</span> };
<span class="highlight-lineno"> 49</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 50</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// And this will be their proportion:</span>
<span class="highlight-lineno"> 51</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">double</span>[] proportion = eigenvalues.Divide(eigenvalues.Sum());
<span class="highlight-lineno"> 52</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 53</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Those are the expected eigenvectors,</span>
<span class="highlight-lineno"> 54</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// in descending order of eigenvalues:</span>
<span class="highlight-lineno"> 55</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">double</span>[,] eigenvectors =
<span class="highlight-lineno"> 56</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno"> 57</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">-0.677873399</span>, <span class="highlight-number">-0.735178656</span> },
<span class="highlight-lineno"> 58</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">-0.735178656</span>,  <span class="highlight-number">0.677873399</span> }
<span class="highlight-lineno"> 59</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>};
<span class="highlight-lineno"> 60</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 61</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Now, here is the place most users get confused. The fact is that</span>
<span class="highlight-lineno"> 62</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// the Eigenvalue decomposition (EVD) is not unique, and both the SVD</span>
<span class="highlight-lineno"> 63</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// and EVD routines used by the framework produces results which are</span>
<span class="highlight-lineno"> 64</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// numerically different from packages such as STATA or MATLAB, but</span>
<span class="highlight-lineno"> 65</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// those are correct.</span>
<span class="highlight-lineno"> 66</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 67</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// If v is an eigenvector, a multiple of this eigenvector (such as a*v, with</span>
<span class="highlight-lineno"> 68</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// a being a scalar) will also be an eigenvector. In the Lindsay case, the</span>
<span class="highlight-lineno"> 69</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// framework produces a first eigenvector with inverted signs. This is the same</span>
<span class="highlight-lineno"> 70</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// as considering a=-1 and taking a*v. The result is still correct.</span>
<span class="highlight-lineno"> 71</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 72</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Retrieve the first expected eigenvector</span>
<span class="highlight-lineno"> 73</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">double</span>[] v = eigenvectors.GetColumn(<span class="highlight-number">0</span>);
<span class="highlight-lineno"> 74</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 75</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Multiply by a scalar and store it back</span>
<span class="highlight-lineno"> 76</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>eigenvectors.SetColumn(<span class="highlight-number">0</span>, v.Multiply(<span class="highlight-number">-1</span>));
<span class="highlight-lineno"> 77</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 78</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// At this point, the eigenvectors should equal the pca.ComponentMatrix,</span>
<span class="highlight-lineno"> 79</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// and the proportion vector should equal the pca.ComponentProportions up</span>
<span class="highlight-lineno"> 80</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// to the 9 decimal places shown in the tutorial. Moreover, unlike the</span>
<span class="highlight-lineno"> 81</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// previous example, the eigenvalues vector should also be equal to the</span>
<span class="highlight-lineno"> 82</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// property pca.Eigenvalues.</span>
<span class="highlight-lineno"> 83</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 84</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 85</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Step 5. Deriving the new data set</span>
<span class="highlight-lineno"> 86</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// ---------------------------------</span>
<span class="highlight-lineno"> 87</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 88</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">double</span>[,] actual = pca.Transform(data);
<span class="highlight-lineno"> 89</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 90</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// transformedData shown in pg. 18</span>
<span class="highlight-lineno"> 91</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">double</span>[,] expected = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[,]
<span class="highlight-lineno"> 92</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno"> 93</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {  <span class="highlight-number">0.827970186</span>, <span class="highlight-number">-0.175115307</span> },
<span class="highlight-lineno"> 94</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">-1.77758033</span>,   <span class="highlight-number">0.142857227</span> },
<span class="highlight-lineno"> 95</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {  <span class="highlight-number">0.992197494</span>,  <span class="highlight-number">0.384374989</span> },
<span class="highlight-lineno"> 96</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {  <span class="highlight-number">0.274210416</span>,  <span class="highlight-number">0.130417207</span> },
<span class="highlight-lineno"> 97</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {  <span class="highlight-number">1.67580142</span>,  <span class="highlight-number">-0.209498461</span> },
<span class="highlight-lineno"> 98</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    {  <span class="highlight-number">0.912949103</span>,  <span class="highlight-number">0.175282444</span> },
<span class="highlight-lineno"> 99</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">-0.099109437</span>, <span class="highlight-number">-0.349824698</span> },
<span class="highlight-lineno">100</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">-1.14457216</span>,   <span class="highlight-number">0.046417258</span> },
<span class="highlight-lineno">101</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">-0.438046137</span>,  <span class="highlight-number">0.017764629</span> },
<span class="highlight-lineno">102</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>    { <span class="highlight-number">-1.22382056</span>,  <span class="highlight-number">-0.162675287</span> },
<span class="highlight-lineno">103</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>};
<span class="highlight-lineno">104</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">105</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// At this point, the actual and expected matrices</span>
<span class="highlight-lineno">106</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// should be equal up to 8 decimal places.</span></pre></div></span></div><h1 class="heading"><span onclick="ExpandCollapse(familyToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(familyToggle, event)" tabindex="0"><img id="familyToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Inheritance Hierarchy</span></h1><div id="familySection" class="section" name="collapseableSection" style=""><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Object</a><br />  <span class="selflink">Accord.Statistics.Analysis<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>PrincipalComponentAnalysis</span><br />    <a href="T_Accord_Statistics_Analysis_KernelPrincipalComponentAnalysis.htm">Accord.Statistics.Analysis<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>KernelPrincipalComponentAnalysis</a><br /></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="AllMembers_T_Accord_Statistics_Analysis_PrincipalComponentAnalysis.htm">PrincipalComponentAnalysis Members</a></div><div class="seeAlsoStyle"><a href="N_Accord_Statistics_Analysis.htm">Accord.Statistics.Analysis Namespace</a></div></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" />
        </div>
        <A NAME="feedback"></A>
        <span id="fb" class="feedbackcss"></span>
        <a href="http://accord.googlecode.com" target="_blank">Accord.NET Framework</a> © 2009-2012. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.  <script type="text/javascript">    var _gaq = _gaq || [];   _gaq.push(['_setAccount', 'UA-3114672-4']);   _gaq.push(['_trackPageview']);    (function() {     var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;     ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';     var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);   })();  </script></div>
    </div>
  </body>
</html>