<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp">
  <head>
    <link rel="SHORTCUT ICON" href="./../icons/favicon.ico" />
    <style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style>
    <link rel="stylesheet" type="text/css" href="./../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" />
    <style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style>
    <script src="./../scripts/branding.js" type="text/javascript">
      <!---->
    </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>RestrictedBoltzmannMachine Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="RestrictedBoltzmannMachine class" />
    <meta name="System.Keywords" content="Accord.Neuro.Networks.RestrictedBoltzmannMachine class" />
    <meta name="System.Keywords" content="RestrictedBoltzmannMachine class, about RestrictedBoltzmannMachine class" />
    <meta name="Microsoft.Help.F1" content="Accord.Neuro.Networks.RestrictedBoltzmannMachine" />
    <meta name="Microsoft.Help.Id" content="T:Accord.Neuro.Networks.RestrictedBoltzmannMachine" />
    <meta name="Description" content="Restricted Boltzmann Machine." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="'true'" />
    <meta name="container" content="Accord.Neuro.Networks" />
    <meta name="file" content="T_Accord_Neuro_Networks_RestrictedBoltzmannMachine" />
    <meta name="guid" content="T_Accord_Neuro_Networks_RestrictedBoltzmannMachine" />
    
    <link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <link type="text/css" rel="stylesheet" href="./../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js">
      <!---->
    </script>
    <meta name="SelfBranded" content="true" />
  </head>
  <body onload="onLoad()" class="primary-mtps-offline-document">
    <div class="OH_outerDiv">
      <div class="OH_outerContent">
        <table class="TitleTable">
          <tr>
            <td class="OH_tdLogoColumn">
              <img alt="Accord.NET (logo)" src="./../icons/logo.png" />
            </td>
            <td class="OH_tdTitleColumn">RestrictedBoltzmannMachine Class</td>
            <td class="OH_tdRunningTitleColumn">Accord.NET Framework</td>
          </tr>
        </table>
        <div id="mainSection">
          <div id="mainBody">
            <span class="introStyle">
              <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
              <a href="http://accord-net.github.io/docs/Index.html" target="_top">Show table of contents (goes to the online documentation index).</a>
              <br />
            </span>
            <div class="summary">
              Restricted Boltzmann Machine.
            </div>
            <div class="OH_CollapsibleAreaRegion">
              <div class="OH_regiontitle">Inheritance Hierarchy</div>
              <div class="OH_CollapsibleArea_HrDiv">
                <hr class="OH_CollapsibleArea_Hr" />
              </div>
            </div>
            <div class="OH_clear"></div>
            <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
            <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="ID0EBKNAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBKNAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>Object</a>
            <br />  <span class="nolink">Network</span><br />    <span class="nolink">ActivationNetwork</span><br />      <span class="selflink">Accord.Neuro.Networks<span id="ID0EBBNAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBBNAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>RestrictedBoltzmannMachine</span><br /><p></p><b>Namespace:</b> <a href="N_Accord_Neuro_Networks.htm" target="">Accord.Neuro.Networks</a><br /><b>Assembly:</b> <span sdata="assembly">Accord.Neuro</span> (in Accord.Neuro.dll) Version: 2.10.0.0 (2.10.0.4632)<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div id="snippetGroup_Syntax" class="code"><div id="ID0EAADAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EAADAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EAADAAAAA_tabimgleft"></div><div id="ID0EAADAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EAADAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EAADAAAAA_tab2" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>VB</a></div><div id="ID0EAADAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EAADAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EAADAAAAA_tabimgright"></div></div><div id="ID0EAADAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAADAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EAADAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EAADAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EAADAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EAADAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EAADAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EAADAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre>[<span class="identifier">SerializableAttribute</span>]
<span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">RestrictedBoltzmannMachine</span> : <span class="identifier">ActivationNetwork</span></pre></div><div id="ID0EAADAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>[SerializableAttribute]
public class RestrictedBoltzmannMachine : ActivationNetwork</pre></div><div id="ID0EAADAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAADAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAADAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAADAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAADAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAADAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EAADAAAAA');</script></div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div id="ID0EACAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EACAAAAA_tabs"></div><div id="ID0EACAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EACAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EACAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EACAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EACAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EACAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EACAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EACAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">// Create some sample inputs and outputs. Note that the</span> 
<span class="highlight-comment">// first four vectors belong to one class, and the other</span> 
<span class="highlight-comment">// four belong to another (you should see that the 1s</span> 
<span class="highlight-comment">// accumulate on the beginning for the first four vectors</span> 
<span class="highlight-comment">// and on the end for the second four).</span> 

<span class="highlight-keyword">double</span>[][] inputs =
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>, <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span> }, <span class="highlight-comment">// class a</span> 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>, <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span> }, <span class="highlight-comment">// class a</span> 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>, <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span> }, <span class="highlight-comment">// class a</span> 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>, <span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span> }, <span class="highlight-comment">// class b</span> 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>, <span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span> }, <span class="highlight-comment">// class b</span> 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>, <span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span> }, <span class="highlight-comment">// class b</span>
};

<span class="highlight-keyword">double</span>[][] outputs =
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">// indicates the inputs at this</span> 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span> }, <span class="highlight-comment">// position belongs to class a</span> 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">// indicates the inputs at this</span> 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }, <span class="highlight-comment">// position belongs to class b</span> 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span> },
};

<span class="highlight-comment">// Create a Bernoulli activation function</span> 
<span class="highlight-keyword">var</span> function = <span class="highlight-keyword">new</span> BernoulliFunction(alpha: <span class="highlight-number">0.5</span>);

<span class="highlight-comment">// Create a Restricted Boltzmann Machine for 6 inputs and with 1 hidden neuron</span> 
<span class="highlight-keyword">var</span> rbm = <span class="highlight-keyword">new</span> RestrictedBoltzmannMachine(function, inputsCount: <span class="highlight-number">6</span>, hiddenNeurons: <span class="highlight-number">2</span>);

<span class="highlight-comment">// Create the learning algorithm for RBMs</span> 
<span class="highlight-keyword">var</span> teacher = <span class="highlight-keyword">new</span> ContrastiveDivergenceLearning(rbm)
{
    Momentum = <span class="highlight-number">0</span>,
    LearningRate = <span class="highlight-number">0.1</span>,
    Decay = <span class="highlight-number">0</span>
};

<span class="highlight-comment">// learn 5000 iterations</span> 
<span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; <span class="highlight-number">5000</span>; i++)
    teacher.RunEpoch(inputs);

<span class="highlight-comment">// Compute the machine answers for the given inputs:</span> 
<span class="highlight-keyword">double</span>[] a = rbm.Compute(<span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span> }); <span class="highlight-comment">// { 0.99, 0.00 }</span> 
<span class="highlight-keyword">double</span>[] b = rbm.Compute(<span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span> }); <span class="highlight-comment">// { 0.00, 0.99 }</span> 

<span class="highlight-comment">// As we can see, the first neuron responds to vectors belonging</span> 
<span class="highlight-comment">// to the first class, firing 0.99 when we feed vectors which </span> 
<span class="highlight-comment">// have 1s at the beginning. Likewise, the second neuron fires </span> 
<span class="highlight-comment">// when the vector belongs to the second class.</span> 

<span class="highlight-comment">// We can also generate input vectors given the classes:</span> 
<span class="highlight-keyword">double</span>[] xa = rbm.GenerateInput(<span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">0</span> }); <span class="highlight-comment">// { 1, 1, 1, 0, 0, 0 }</span> 
<span class="highlight-keyword">double</span>[] xb = rbm.GenerateInput(<span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span> }); <span class="highlight-comment">// { 0, 0, 1, 1, 1, 0 }</span> 

<span class="highlight-comment">// As we can see, if we feed an output pattern where the first neuron</span> 
<span class="highlight-comment">// is firing and the second isn't, the network generates an example of</span> 
<span class="highlight-comment">// a vector belonging to the first class. The same goes for the second</span> 
<span class="highlight-comment">// neuron and the second class.</span></pre></div><div id="ID0EACAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>// Create some sample inputs and outputs. Note that the 
// first four vectors belong to one class, and the other 
// four belong to another (you should see that the 1s 
// accumulate on the beginning for the first four vectors 
// and on the end for the second four). 

double[][] inputs =
{
    new double[] { 1,1,1, 0,0,0 }, // class a 
    new double[] { 1,0,1, 0,0,0 }, // class a 
    new double[] { 1,1,1, 0,0,0 }, // class a 
    new double[] { 0,0,1, 1,1,0 }, // class b 
    new double[] { 0,0,1, 1,0,0 }, // class b 
    new double[] { 0,0,1, 1,1,0 }, // class b
};

double[][] outputs =
{
    new double[] { 1, 0 }, // indicates the inputs at this 
    new double[] { 1, 0 }, // position belongs to class a 
    new double[] { 1, 0 },
    new double[] { 0, 1 }, // indicates the inputs at this 
    new double[] { 0, 1 }, // position belongs to class b 
    new double[] { 0, 1 },
};

// Create a Bernoulli activation function 
var function = new BernoulliFunction(alpha: 0.5);

// Create a Restricted Boltzmann Machine for 6 inputs and with 1 hidden neuron 
var rbm = new RestrictedBoltzmannMachine(function, inputsCount: 6, hiddenNeurons: 2);

// Create the learning algorithm for RBMs 
var teacher = new ContrastiveDivergenceLearning(rbm)
{
    Momentum = 0,
    LearningRate = 0.1,
    Decay = 0
};

// learn 5000 iterations 
for (int i = 0; i &lt; 5000; i++)
    teacher.RunEpoch(inputs);

// Compute the machine answers for the given inputs: 
double[] a = rbm.Compute(new double[] { 1, 1, 1, 0, 0, 0 }); // { 0.99, 0.00 } 
double[] b = rbm.Compute(new double[] { 0, 0, 0, 1, 1, 1 }); // { 0.00, 0.99 } 

// As we can see, the first neuron responds to vectors belonging 
// to the first class, firing 0.99 when we feed vectors which  
// have 1s at the beginning. Likewise, the second neuron fires  
// when the vector belongs to the second class. 

// We can also generate input vectors given the classes: 
double[] xa = rbm.GenerateInput(new double[] { 1, 0 }); // { 1, 1, 1, 0, 0, 0 } 
double[] xb = rbm.GenerateInput(new double[] { 0, 1 }); // { 0, 0, 1, 1, 1, 0 } 

// As we can see, if we feed an output pattern where the first neuron 
// is firing and the second isn't, the network generates an example of 
// a vector belonging to the first class. The same goes for the second 
// neuron and the second class.</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EACAAAAA');</script><a name="seeAlsoSection"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div class="seeAlsoStyle"><a href="AllMembers_T_Accord_Neuro_Networks_RestrictedBoltzmannMachine.htm" target="">RestrictedBoltzmannMachine Members</a></div><div class="seeAlsoStyle"><a href="N_Accord_Neuro_Networks.htm" target="">Accord.Neuro.Networks Namespace</a></div><div class="seeAlsoStyle"><a href="T_Accord_Neuro_Learning_ContrastiveDivergenceLearning.htm" target="">Accord.Neuro.Learning<span id="ID0EBABAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBABAAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>ContrastiveDivergenceLearning</a></div><div class="seeAlsoStyle"><a href="T_Accord_Neuro_ActivationFunctions_BernoulliFunction.htm" target="">Accord.Neuro.ActivationFunctions<span id="ID0EBAAAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBAAAAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>BernoulliFunction</a></div></div>
        </div>
      </div>
    </div>
    <div id="OH_footer" class="OH_footer">
      <p>
        <a href="http://accord-net.github.io/" target="_blank">Accord.NET Framework</a> © 2009-2013. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.</p>
      <div class="OH_feedbacklink">
        <a href="mailto:?subject=Accord.NET+Framework+RestrictedBoltzmannMachine+Class+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic.</div>
    </div>
  </body>
</html>