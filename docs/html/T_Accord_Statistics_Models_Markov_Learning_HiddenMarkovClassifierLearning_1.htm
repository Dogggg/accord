<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp">
  <head>
    <link rel="SHORTCUT ICON" href="./../icons/favicon.ico" />
    <style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style>
    <link rel="stylesheet" type="text/css" href="./../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" />
    <style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style>
    <script src="./../scripts/branding.js" type="text/javascript">
      <!---->
    </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>HiddenMarkovClassifierLearning(TDistribution) Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="HiddenMarkovClassifierLearning%3CTDistribution%3E class" />
    <meta name="System.Keywords" content="Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning%3CTDistribution%3E class" />
    <meta name="System.Keywords" content="HiddenMarkovClassifierLearning%3CTDistribution%3E class, about HiddenMarkovClassifierLearning%3CTDistribution%3E class" />
    <meta name="System.Keywords" content="HiddenMarkovClassifierLearning(Of TDistribution) class" />
    <meta name="System.Keywords" content="Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning(Of TDistribution) class" />
    <meta name="System.Keywords" content="HiddenMarkovClassifierLearning(Of TDistribution) class, about HiddenMarkovClassifierLearning(Of TDistribution) class" />
    <meta name="Microsoft.Help.F1" content="Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning`1" />
    <meta name="Microsoft.Help.Id" content="T:Accord.Statistics.Models.Markov.Learning.HiddenMarkovClassifierLearning`1" />
    <meta name="Description" content="Arbitrary-density hidden Markov Sequence Classifier learning algorithm." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="'true'" />
    <meta name="container" content="Accord.Statistics.Models.Markov.Learning" />
    <meta name="file" content="T_Accord_Statistics_Models_Markov_Learning_HiddenMarkovClassifierLearning_1" />
    <meta name="guid" content="T_Accord_Statistics_Models_Markov_Learning_HiddenMarkovClassifierLearning_1" />
    
    <link type="text/css" rel="stylesheet" href="./../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js">
      <!---->
    </script>
    <meta name="SelfBranded" content="true" />
  </head>
  <body onload="onLoad()" class="primary-mtps-offline-document">
    <div class="OH_outerDiv">
      <div class="OH_outerContent">
        <table class="TitleTable">
          <tr>
            <td class="OH_tdLogoColumn">
              <img alt="Accord.NET (logo)" src="./../icons/logo.png" />
            </td>
            <td class="OH_tdTitleColumn">HiddenMarkovClassifierLearning<span id="ID0EDBABAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDBABAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script><span class="typeparameter">TDistribution</span><span id="ID0EBBABAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBBABAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script> Class</td>
            <td class="OH_tdRunningTitleColumn">Accord.NET Framework</td>
          </tr>
        </table>
        <div id="mainSection">
          <div id="mainBody">
            <span class="introStyle">
              <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
              <a href="http://accord.googlecode.com/svn/docs/Index.html" target="_top">Show table of contents (goes to the online documentation index).</a>
              <br />
            </span>
            <div class="summary">
               Arbitrary-density hidden Markov Sequence Classifier learning algorithm.
             </div>
            <div class="OH_CollapsibleAreaRegion">
              <div class="OH_regiontitle">Inheritance Hierarchy</div>
              <div class="OH_CollapsibleArea_HrDiv">
                <hr class="OH_CollapsibleArea_Hr" />
              </div>
            </div>
            <div class="OH_clear"></div>
            <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
            <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="ID0EBSOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBSOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>Object</a>
            <br />  <a href="T_Accord_Statistics_Models_Markov_Learning_BaseHiddenMarkovClassifierLearning_2.htm" target="">Accord.Statistics.Models.Markov.Learning<span id="ID0EBPOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBPOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>BaseHiddenMarkovClassifierLearning</a><span id="ID0EOOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EOOAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script><a href="T_Accord_Statistics_Models_Markov_HiddenMarkovClassifier_1.htm" target="">HiddenMarkovClassifier</a><span id="ID0EMOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EMOAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script><span class="selflink"><span class="typeparam">TDistribution</span></span><span id="ID0EKOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EKOAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script>, <a href="T_Accord_Statistics_Models_Markov_HiddenMarkovModel_1.htm" target="">HiddenMarkovModel</a><span id="ID0EHOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EHOAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script><span class="selflink"><span class="typeparam">TDistribution</span></span><span id="ID0EFOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EFOAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script><span id="ID0EEOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EEOAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script><br />    <span class="selflink">Accord.Statistics.Models.Markov.Learning<span id="ID0EEBOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EEBOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>HiddenMarkovClassifierLearning<span id="ID0ECBOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECBOAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TDistribution<span id="ID0EABOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EABOAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></span><br /><p></p><b>Namespace:</b> <a href="N_Accord_Statistics_Models_Markov_Learning.htm" target="">Accord.Statistics.Models.Markov.Learning</a><br /><b>Assembly:</b> <span sdata="assembly">Accord.Statistics</span> (in Accord.Statistics.dll) Version: 2.9.0.0 (2.9.0.0)<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div id="snippetGroup_Syntax" class="code"><div id="ID0EABEAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EABEAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EABEAAAAA_tabimgleft"></div><div id="ID0EABEAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EABEAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EABEAAAAA_tab2" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>VB</a></div><div id="ID0EABEAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EABEAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EABEAAAAA_tabimgright"></div></div><div id="ID0EABEAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EABEAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EABEAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EABEAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EABEAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EABEAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EABEAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EABEAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">HiddenMarkovClassifierLearning</span>&lt;TDistribution&gt; : <a href="T_Accord_Statistics_Models_Markov_Learning_BaseHiddenMarkovClassifierLearning_2.htm">BaseHiddenMarkovClassifierLearning</a>&lt;<a href="T_Accord_Statistics_Models_Markov_HiddenMarkovClassifier_1.htm">HiddenMarkovClassifier</a>&lt;TDistribution&gt;, <a href="T_Accord_Statistics_Models_Markov_HiddenMarkovModel_1.htm">HiddenMarkovModel</a>&lt;TDistribution&gt;&gt;
<span class="keyword">where</span> TDistribution : <a href="T_Accord_Statistics_Distributions_IDistribution.htm">IDistribution</a></pre></div><div id="ID0EABEAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>public class HiddenMarkovClassifierLearning&lt;TDistribution&gt; : BaseHiddenMarkovClassifierLearning&lt;HiddenMarkovClassifier&lt;TDistribution&gt;, HiddenMarkovModel&lt;TDistribution&gt;&gt;
where TDistribution : IDistribution</pre></div><div id="ID0EABEAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EABEAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EABEAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EABEAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EABEAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EABEAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EABEAAAAA');</script></div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Type Parameters</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><dl><dt><span class="parameter">TDistribution</span></dt><dd></dd></dl><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><p>
               This class acts as a teacher for <a href="T_Accord_Statistics_Models_Markov_HiddenMarkovClassifier_1.htm" target="">
               classifiers based on arbitrary-density hidden Markov models</a>. The learning
               algorithm uses a gerative approach. It works by training each model in the gerative
               classifier separately.</p><p>
               For the discrete version of this learning algorithm, please see its non-generic
               conterpart <a href="T_Accord_Statistics_Models_Markov_Learning_HiddenMarkovClassifierLearning.htm" target="">HiddenMarkovClassifierLearning</a>.</p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><p>
               The following example creates a continuous-density hidden Markov model sequence
               classifier to recognize two classes of univariate observation sequences.</p><div id="ID0EDCAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EDCAAAAA_tabs"></div><div id="ID0EDCAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EDCAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EDCAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EDCAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EDCAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EDCAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EDCAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EDCAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">// Create a Continuous density Hidden Markov Model Sequence Classifier</span> 
<span class="highlight-comment">// to detect a univariate sequence and the same sequence backwards.</span> 
<span class="highlight-keyword">double</span>[][] sequences = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[][] 
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">2</span>,<span class="highlight-number">3</span>,<span class="highlight-number">4</span> }, <span class="highlight-comment">// This is the first  sequence with label = 0</span> 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">4</span>,<span class="highlight-number">3</span>,<span class="highlight-number">2</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span> }, <span class="highlight-comment">// This is the second sequence with label = 1</span>
};

<span class="highlight-comment">// Labels for the sequences</span> 
<span class="highlight-keyword">int</span>[] labels = { <span class="highlight-number">0</span>, <span class="highlight-number">1</span> };

<span class="highlight-comment">// Creates a new Continuous-density Hidden Markov Model Sequence Classifier</span> 
<span class="highlight-comment">//  containing 2 hidden Markov Models with 2 states and an underlying Normal</span> 
<span class="highlight-comment">//  distribution as the continuous probability density.</span>
NormalDistribution density = <span class="highlight-keyword">new</span> NormalDistribution();
<span class="highlight-keyword">var</span> classifier = <span class="highlight-keyword">new</span> HiddenMarkovClassifier&lt;NormalDistribution&gt;(<span class="highlight-number">2</span>, <span class="highlight-keyword">new</span> Ergodic(<span class="highlight-number">2</span>), density);

<span class="highlight-comment">// Create a new learning algorithm to train the sequence classifier</span> 
<span class="highlight-keyword">var</span> teacher = <span class="highlight-keyword">new</span> HiddenMarkovClassifierLearning&lt;NormalDistribution&gt;(classifier,

    <span class="highlight-comment">// Train each model until the log-likelihood changes less than 0.001</span>
    modelIndex =&gt; <span class="highlight-keyword">new</span> BaumWelchLearning&lt;NormalDistribution&gt;(classifier.Models[modelIndex])
    {
        Tolerance = <span class="highlight-number">0.0001</span>,
        Iterations = <span class="highlight-number">0</span>
    }
);

<span class="highlight-comment">// Train the sequence classifier using the algorithm</span>
teacher.Run(sequences, labels);


<span class="highlight-comment">// Calculate the probability that the given</span> 
<span class="highlight-comment">//  sequences originated from the model</span> 
<span class="highlight-keyword">double</span> likelihood;

<span class="highlight-comment">// Try to classify the first sequence (output should be 0)</span> 
<span class="highlight-keyword">int</span> c1 = classifier.Compute(sequences[<span class="highlight-number">0</span>], <span class="highlight-keyword">out</span> likelihood);

<span class="highlight-comment">// Try to classify the second sequence (output should be 1)</span> 
<span class="highlight-keyword">int</span> c2 = classifier.Compute(sequences[<span class="highlight-number">1</span>], <span class="highlight-keyword">out</span> likelihood);</pre></div><div id="ID0EDCAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>// Create a Continuous density Hidden Markov Model Sequence Classifier 
// to detect a univariate sequence and the same sequence backwards. 
double[][] sequences = new double[][] 
{
    new double[] { 0,1,2,3,4 }, // This is the first  sequence with label = 0 
    new double[] { 4,3,2,1,0 }, // This is the second sequence with label = 1
};

// Labels for the sequences 
int[] labels = { 0, 1 };

// Creates a new Continuous-density Hidden Markov Model Sequence Classifier 
//  containing 2 hidden Markov Models with 2 states and an underlying Normal 
//  distribution as the continuous probability density.
NormalDistribution density = new NormalDistribution();
var classifier = new HiddenMarkovClassifier&lt;NormalDistribution&gt;(2, new Ergodic(2), density);

// Create a new learning algorithm to train the sequence classifier 
var teacher = new HiddenMarkovClassifierLearning&lt;NormalDistribution&gt;(classifier,

    // Train each model until the log-likelihood changes less than 0.001
    modelIndex =&gt; new BaumWelchLearning&lt;NormalDistribution&gt;(classifier.Models[modelIndex])
    {
        Tolerance = 0.0001,
        Iterations = 0
    }
);

// Train the sequence classifier using the algorithm
teacher.Run(sequences, labels);


// Calculate the probability that the given 
//  sequences originated from the model 
double likelihood;

// Try to classify the first sequence (output should be 0) 
int c1 = classifier.Compute(sequences[0], out likelihood);

// Try to classify the second sequence (output should be 1) 
int c2 = classifier.Compute(sequences[1], out likelihood);</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EDCAAAAA');</script><p>
               The following example creates a continuous-density hidden Markov model sequence
               classifier to recognize two classes of multivariate sequence of observations.
               This example uses multivariate Normal distributions as emission densities. </p><p>
               When there is insufficient training data, or one of the variables is constant,
               the Normal distribution estimation may fail with a "Covariance matrix is not
               positive-definite". In this case, it is possible to sidestep this issue by
               specifying a small regularization constant to be added to the diagonal elements
               of the covariance matrix. </p><div id="ID0EACAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EACAAAAA_tabs"></div><div id="ID0EACAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EACAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EACAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EACAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EACAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EACAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EACAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EACAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">// Create a Continuous density Hidden Markov Model Sequence Classifier</span> 
<span class="highlight-comment">// to detect a multivariate sequence and the same sequence backwards.</span> 

<span class="highlight-keyword">double</span>[][][] sequences = <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[][][]
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[][] 
    { 
        <span class="highlight-comment">// This is the first  sequence with label = 0</span> 
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">1</span> },
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>, <span class="highlight-number">2</span> },
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">2</span>, <span class="highlight-number">3</span> },
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">3</span>, <span class="highlight-number">4</span> },
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">4</span>, <span class="highlight-number">5</span> },
    }, 

    <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[][]
    {
            <span class="highlight-comment">// This is the second sequence with label = 1</span> 
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">4</span>,  <span class="highlight-number">3</span> },
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">3</span>,  <span class="highlight-number">2</span> },
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">2</span>,  <span class="highlight-number">1</span> },
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">1</span>,  <span class="highlight-number">0</span> },
        <span class="highlight-keyword">new</span> <span class="highlight-keyword">double</span>[] { <span class="highlight-number">0</span>, <span class="highlight-number">-1</span> },
    }
};

<span class="highlight-comment">// Labels for the sequences</span> 
<span class="highlight-keyword">int</span>[] labels = { <span class="highlight-number">0</span>, <span class="highlight-number">1</span> };


<span class="highlight-keyword">var</span> initialDensity = <span class="highlight-keyword">new</span> MultivariateNormalDistribution(<span class="highlight-number">2</span>);

<span class="highlight-comment">// Creates a sequence classifier containing 2 hidden Markov Models with 2 states</span> 
<span class="highlight-comment">// and an underlying multivariate mixture of Normal distributions as density.</span> 
<span class="highlight-keyword">var</span> classifier = <span class="highlight-keyword">new</span> HiddenMarkovClassifier&lt;MultivariateNormalDistribution&gt;(
    classes: <span class="highlight-number">2</span>, topology: <span class="highlight-keyword">new</span> Forward(<span class="highlight-number">2</span>), initial: initialDensity);

<span class="highlight-comment">// Configure the learning algorithms to train the sequence classifier</span> 
<span class="highlight-keyword">var</span> teacher = <span class="highlight-keyword">new</span> HiddenMarkovClassifierLearning&lt;MultivariateNormalDistribution&gt;(
    classifier,

    <span class="highlight-comment">// Train each model until the log-likelihood changes less than 0.0001</span>
    modelIndex =&gt; <span class="highlight-keyword">new</span> BaumWelchLearning&lt;MultivariateNormalDistribution&gt;(
        classifier.Models[modelIndex])
    {
        Tolerance = <span class="highlight-number">0.0001</span>,
        Iterations = <span class="highlight-number">0</span>,

        FittingOptions = <span class="highlight-keyword">new</span> NormalOptions()
        {
            Diagonal = <span class="highlight-keyword">true</span>,      <span class="highlight-comment">// only diagonal covariance matrices</span>
            Regularization = <span class="highlight-number">1</span>e<span class="highlight-number">-5</span> <span class="highlight-comment">// avoid non-positive definite errors</span>
        }
    }
);

<span class="highlight-comment">// Train the sequence classifier using the algorithm</span> 
<span class="highlight-keyword">double</span> logLikelihood = teacher.Run(sequences, labels);


<span class="highlight-comment">// Calculate the probability that the given</span> 
<span class="highlight-comment">//  sequences originated from the model</span> 
<span class="highlight-keyword">double</span> likelihood, likelihood2;

<span class="highlight-comment">// Try to classify the 1st sequence (output should be 0)</span> 
<span class="highlight-keyword">int</span> c1 = classifier.Compute(sequences[<span class="highlight-number">0</span>], <span class="highlight-keyword">out</span> likelihood);

<span class="highlight-comment">// Try to classify the 2nd sequence (output should be 1)</span> 
<span class="highlight-keyword">int</span> c2 = classifier.Compute(sequences[<span class="highlight-number">1</span>], <span class="highlight-keyword">out</span> likelihood2);</pre></div><div id="ID0EACAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>// Create a Continuous density Hidden Markov Model Sequence Classifier 
// to detect a multivariate sequence and the same sequence backwards. 

double[][][] sequences = new double[][][]
{
    new double[][] 
    { 
        // This is the first  sequence with label = 0 
        new double[] { 0, 1 },
        new double[] { 1, 2 },
        new double[] { 2, 3 },
        new double[] { 3, 4 },
        new double[] { 4, 5 },
    }, 

    new double[][]
    {
            // This is the second sequence with label = 1 
        new double[] { 4,  3 },
        new double[] { 3,  2 },
        new double[] { 2,  1 },
        new double[] { 1,  0 },
        new double[] { 0, -1 },
    }
};

// Labels for the sequences 
int[] labels = { 0, 1 };


var initialDensity = new MultivariateNormalDistribution(2);

// Creates a sequence classifier containing 2 hidden Markov Models with 2 states 
// and an underlying multivariate mixture of Normal distributions as density. 
var classifier = new HiddenMarkovClassifier&lt;MultivariateNormalDistribution&gt;(
    classes: 2, topology: new Forward(2), initial: initialDensity);

// Configure the learning algorithms to train the sequence classifier 
var teacher = new HiddenMarkovClassifierLearning&lt;MultivariateNormalDistribution&gt;(
    classifier,

    // Train each model until the log-likelihood changes less than 0.0001
    modelIndex =&gt; new BaumWelchLearning&lt;MultivariateNormalDistribution&gt;(
        classifier.Models[modelIndex])
    {
        Tolerance = 0.0001,
        Iterations = 0,

        FittingOptions = new NormalOptions()
        {
            Diagonal = true,      // only diagonal covariance matrices
            Regularization = 1e-5 // avoid non-positive definite errors
        }
    }
);

// Train the sequence classifier using the algorithm 
double logLikelihood = teacher.Run(sequences, labels);


// Calculate the probability that the given 
//  sequences originated from the model 
double likelihood, likelihood2;

// Try to classify the 1st sequence (output should be 0) 
int c1 = classifier.Compute(sequences[0], out likelihood);

// Try to classify the 2nd sequence (output should be 1) 
int c2 = classifier.Compute(sequences[1], out likelihood2);</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EACAAAAA');</script><a name="seeAlsoSection"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div class="seeAlsoStyle"><a href="AllMembers_T_Accord_Statistics_Models_Markov_Learning_HiddenMarkovClassifierLearning_1.htm" target="">HiddenMarkovClassifierLearning<span id="ID0EDABAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDABAAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TDistribution<span id="ID0EBABAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBABAAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script> Members</a></div><div class="seeAlsoStyle"><a href="N_Accord_Statistics_Models_Markov_Learning.htm" target="">Accord.Statistics.Models.Markov.Learning Namespace</a></div></div>
        </div>
      </div>
    </div>
    <div id="OH_footer" class="OH_footer">
      <p>
        <a href="http://accord.googlecode.com" target="_blank">Accord.NET Framework</a> © 2009-2013. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.</p>
      <div class="OH_feedbacklink">
        <a href="mailto:?subject=Accord.NET+Framework+HiddenMarkovClassifierLearning(TDistribution)+Class+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic.</div>
    </div>
  </body>
</html>