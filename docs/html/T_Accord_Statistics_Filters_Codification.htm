<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp">
  <head>
    <link rel="SHORTCUT ICON" href="./../icons/favicon.ico" />
    <style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style>
    <link rel="stylesheet" type="text/css" href="./../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" />
    <style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style>
    <script src="./../scripts/branding.js" type="text/javascript">
      <!---->
    </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>Codification Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="Codification class" />
    <meta name="System.Keywords" content="Accord.Statistics.Filters.Codification class" />
    <meta name="System.Keywords" content="Codification class, about Codification class" />
    <meta name="Microsoft.Help.F1" content="Accord.Statistics.Filters.Codification" />
    <meta name="Microsoft.Help.Id" content="T:Accord.Statistics.Filters.Codification" />
    <meta name="Description" content="Codification Filter class." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="'true'" />
    <meta name="container" content="Accord.Statistics.Filters" />
    <meta name="file" content="T_Accord_Statistics_Filters_Codification" />
    <meta name="guid" content="T_Accord_Statistics_Filters_Codification" />
    
    <link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <link type="text/css" rel="stylesheet" href="./../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js">
      <!---->
    </script>
    <meta name="SelfBranded" content="true" />
  </head>
  <body onload="onLoad()" class="primary-mtps-offline-document">
    <div class="OH_outerDiv">
      <div class="OH_outerContent">
        <table class="TitleTable">
          <tr>
            <td class="OH_tdLogoColumn">
              <img alt="Accord.NET (logo)" src="./../icons/logo.png" />
            </td>
            <td class="OH_tdTitleColumn">Codification Class</td>
            <td class="OH_tdRunningTitleColumn">Accord.NET Framework</td>
          </tr>
        </table>
        <div id="mainSection">
          <div id="mainBody">
            <span class="introStyle">
              <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
              <a href="http://accord-net.github.io/docs/Index.html" target="_top">Show table of contents (goes to the online documentation index).</a>
              <br />
            </span>
            <div class="summary">
              Codification Filter class.
            </div>
            <div class="OH_CollapsibleAreaRegion">
              <div class="OH_regiontitle">Inheritance Hierarchy</div>
              <div class="OH_CollapsibleArea_HrDiv">
                <hr class="OH_CollapsibleArea_Hr" />
              </div>
            </div>
            <div class="OH_clear"></div>
            <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
            <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="ID0EBKOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBKOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>Object</a>
            <br />  <a href="T_Accord_Statistics_Filters_BaseFilter_1.htm" target="">Accord.Statistics.Filters<span id="ID0EBHOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBHOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>BaseFilter</a><span id="ID0EGOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EGOAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script><a href="T_Accord_Statistics_Filters_Codification_Options.htm" target="">Codification<span id="ID0EBFOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBFOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>Options</a><span id="ID0EEOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EEOAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script><br />    <span class="selflink">Accord.Statistics.Filters<span id="ID0EBBOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBBOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>Codification</span><br /><p></p><b>Namespace:</b> <a href="N_Accord_Statistics_Filters.htm" target="">Accord.Statistics.Filters</a><br /><b>Assembly:</b> <span sdata="assembly">Accord.Statistics</span> (in Accord.Statistics.dll) Version: 2.10.0.0 (2.10.0.4632)<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div id="snippetGroup_Syntax" class="code"><div id="ID0EAAEAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EAAEAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EAAEAAAAA_tabimgleft"></div><div id="ID0EAAEAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EAAEAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EAAEAAAAA_tab2" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>VB</a></div><div id="ID0EAAEAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EAAEAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EAAEAAAAA_tabimgright"></div></div><div id="ID0EAAEAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAEAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EAAEAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EAAEAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EAAEAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EAAEAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EAAEAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EAAEAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre>[<span class="identifier">SerializableAttribute</span>]
<span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">Codification</span> : <span class="identifier">BaseFilter</span>&lt;<span class="identifier">Codification<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Options</span>&gt;, 
	<span class="identifier">IAutoConfigurableFilter</span>, <span class="identifier">IFilter</span></pre></div><div id="ID0EAAEAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>[SerializableAttribute]
public class Codification : BaseFilter&lt;Codification..::..Options&gt;, 
	IAutoConfigurableFilter, IFilter</pre></div><div id="ID0EAAEAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EAAEAAAAA');</script></div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><p>
              The codification filter performs an integer codification of classes in
              given in a string form. An unique integer identifier will be assigned
              for each of the string classes.</p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><p>
              When handling data tables, often there will be cases in which a single
              table contains both numerical variables and categorical data in the form
              of text labels. Since most machine learning and statistics algorithms
              expect their data to be numeric, the codification filter can be used
              to create mappings between text labels and discrete symbols.</p><div id="ID0EECAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EECAAAAA_tabs"></div><div id="ID0EECAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EECAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EECAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EECAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EECAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EECAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EECAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EECAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">// Suppose we have a data table relating the age of</span> 
<span class="highlight-comment">// a person and its categorical classification, as </span> 
<span class="highlight-comment">// in "child", "adult" or "elder".</span> 

<span class="highlight-comment">// The Codification filter is able to extract those</span> 
<span class="highlight-comment">// string labels and transform them into discrete</span> 
<span class="highlight-comment">// symbols, assigning integer labels to each of them</span> 
<span class="highlight-comment">// such as "child" = 0, "adult" = 1, and "elder" = 3.</span> 

<span class="highlight-comment">// Create the aforementioned sample table</span>
DataTable table = <span class="highlight-keyword">new</span> DataTable(<span class="highlight-literal">"Sample data"</span>);
table.Columns.Add(<span class="highlight-literal">"Age"</span>, <span class="highlight-keyword">typeof</span>(<span class="highlight-keyword">int</span>));
table.Columns.Add(<span class="highlight-literal">"Label"</span>, <span class="highlight-keyword">typeof</span>(<span class="highlight-keyword">string</span>));

<span class="highlight-comment">//            age   label</span>
table.Rows.Add(<span class="highlight-number">10</span>, <span class="highlight-literal">"child"</span>);
table.Rows.Add(<span class="highlight-number">07</span>, <span class="highlight-literal">"child"</span>);
table.Rows.Add(<span class="highlight-number">04</span>, <span class="highlight-literal">"child"</span>);
table.Rows.Add(<span class="highlight-number">21</span>, <span class="highlight-literal">"adult"</span>);
table.Rows.Add(<span class="highlight-number">27</span>, <span class="highlight-literal">"adult"</span>);
table.Rows.Add(<span class="highlight-number">12</span>, <span class="highlight-literal">"child"</span>);
table.Rows.Add(<span class="highlight-number">79</span>, <span class="highlight-literal">"elder"</span>);
table.Rows.Add(<span class="highlight-number">40</span>, <span class="highlight-literal">"adult"</span>);
table.Rows.Add(<span class="highlight-number">30</span>, <span class="highlight-literal">"adult"</span>);


<span class="highlight-comment">// Now, let's say we need to translate those text labels</span> 
<span class="highlight-comment">// into integer symbols. Let's use a Codification filter:</span>

Codification codebook = <span class="highlight-keyword">new</span> Codification(table);


<span class="highlight-comment">// After that, we can use the codebook to "translate"</span> 
<span class="highlight-comment">// the text labels into discrete symbols, such as:</span> 

<span class="highlight-keyword">int</span> a = codebook.Translate(<span class="highlight-literal">"Label"</span>, <span class="highlight-literal">"child"</span>); <span class="highlight-comment">// returns 0</span> 
<span class="highlight-keyword">int</span> b = codebook.Translate(<span class="highlight-literal">"Label"</span>, <span class="highlight-literal">"adult"</span>); <span class="highlight-comment">// returns 1</span> 
<span class="highlight-keyword">int</span> c = codebook.Translate(<span class="highlight-literal">"Label"</span>, <span class="highlight-literal">"elder"</span>); <span class="highlight-comment">// returns 2</span> 

<span class="highlight-comment">// We can also do the reverse:</span> 
<span class="highlight-keyword">string</span> labela = codebook.Translate(<span class="highlight-literal">"Label"</span>, <span class="highlight-number">0</span>); <span class="highlight-comment">// returns "child"</span> 
<span class="highlight-keyword">string</span> labelb = codebook.Translate(<span class="highlight-literal">"Label"</span>, <span class="highlight-number">1</span>); <span class="highlight-comment">// returns "adult"</span> 
<span class="highlight-keyword">string</span> labelc = codebook.Translate(<span class="highlight-literal">"Label"</span>, <span class="highlight-number">2</span>); <span class="highlight-comment">// returns "elder"</span></pre></div><div id="ID0EECAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>// Suppose we have a data table relating the age of 
// a person and its categorical classification, as  
// in "child", "adult" or "elder". 

// The Codification filter is able to extract those 
// string labels and transform them into discrete 
// symbols, assigning integer labels to each of them 
// such as "child" = 0, "adult" = 1, and "elder" = 3. 

// Create the aforementioned sample table
DataTable table = new DataTable("Sample data");
table.Columns.Add("Age", typeof(int));
table.Columns.Add("Label", typeof(string));

//            age   label
table.Rows.Add(10, "child");
table.Rows.Add(07, "child");
table.Rows.Add(04, "child");
table.Rows.Add(21, "adult");
table.Rows.Add(27, "adult");
table.Rows.Add(12, "child");
table.Rows.Add(79, "elder");
table.Rows.Add(40, "adult");
table.Rows.Add(30, "adult");


// Now, let's say we need to translate those text labels 
// into integer symbols. Let's use a Codification filter:

Codification codebook = new Codification(table);


// After that, we can use the codebook to "translate" 
// the text labels into discrete symbols, such as: 

int a = codebook.Translate("Label", "child"); // returns 0 
int b = codebook.Translate("Label", "adult"); // returns 1 
int c = codebook.Translate("Label", "elder"); // returns 2 

// We can also do the reverse: 
string labela = codebook.Translate("Label", 0); // returns "child" 
string labelb = codebook.Translate("Label", 1); // returns "adult" 
string labelc = codebook.Translate("Label", 2); // returns "elder"</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EECAAAAA');</script><p>
              After we have created the codebook, we can use it to feed data with
              categorical variables to method which would otherwise not know how
              to handle text labels data. Continuing with our example, the next
              code section shows how to convert an entire data table into a numerical
              matrix. </p><div id="ID0ECCAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0ECCAAAAA_tabs"></div><div id="ID0ECCAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0ECCAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0ECCAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0ECCAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0ECCAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0ECCAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0ECCAAAAA','4')" title="Print">Print</a></div></div><div id="ID0ECCAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">// We can process an entire data table at once:</span>
DataTable result = codebook.Apply(table);

<span class="highlight-comment">// The resulting table can be transformed to jagged array:</span> 
<span class="highlight-keyword">double</span>[][] matrix = Matrix.ToArray(result);

<span class="highlight-comment">// and the resulting matrix will be given by</span> 
<span class="highlight-comment">// new double[][] </span> 
<span class="highlight-comment">// {</span> 
<span class="highlight-comment">//     new double[] { 10, 0 },</span> 
<span class="highlight-comment">//     new double[] {  7, 0 },</span> 
<span class="highlight-comment">//     new double[] {  4, 0 },</span> 
<span class="highlight-comment">//     new double[] { 21, 1 },</span> 
<span class="highlight-comment">//     new double[] { 27, 1 },</span> 
<span class="highlight-comment">//     new double[] { 12, 0 },</span> 
<span class="highlight-comment">//     new double[] { 79, 2 },</span> 
<span class="highlight-comment">//     new double[] { 40, 1 },</span> 
<span class="highlight-comment">//     new double[] { 30, 1 } </span> 
<span class="highlight-comment">// };</span> 

<span class="highlight-comment">// PS: the string representation for the matrix above can be obtained by calling</span> 
<span class="highlight-keyword">string</span> str = matrix.ToString(CSharpJaggedMatrixFormatProvider.InvariantCulture);</pre></div><div id="ID0ECCAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>// We can process an entire data table at once:
DataTable result = codebook.Apply(table);

// The resulting table can be transformed to jagged array: 
double[][] matrix = Matrix.ToArray(result);

// and the resulting matrix will be given by 
// new double[][]  
// { 
//     new double[] { 10, 0 }, 
//     new double[] {  7, 0 }, 
//     new double[] {  4, 0 }, 
//     new double[] { 21, 1 }, 
//     new double[] { 27, 1 }, 
//     new double[] { 12, 0 }, 
//     new double[] { 79, 2 }, 
//     new double[] { 40, 1 }, 
//     new double[] { 30, 1 }  
// }; 

// PS: the string representation for the matrix above can be obtained by calling 
string str = matrix.ToString(CSharpJaggedMatrixFormatProvider.InvariantCulture);</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0ECCAAAAA');</script><p>
              Finally, by expressing our data in terms of a simple numerical
              matrix we will be able to feed it to any machine learning algorithm.
              The following code section shows how to create a <a href="T_Accord_Statistics_Kernels_Linear.htm" target="">
              linear</a> multi-class Support Vector Machine to classify ages into any
              of the previously considered text labels ("child", "adult" or "elder").</p><div id="ID0EACAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EACAAAAA_tabs"></div><div id="ID0EACAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EACAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EACAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EACAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EACAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EACAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EACAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EACAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">// Now we will be able to feed this matrix to any machine learning</span> 
<span class="highlight-comment">// algorithm without having to worry about text labels in our data:</span> 

<span class="highlight-comment">// Use the first column as input and the second column a output:</span> 

<span class="highlight-keyword">double</span>[][] inputs = matrix.GetColumns(<span class="highlight-number">0</span>);      <span class="highlight-comment">// Age column</span> 
<span class="highlight-keyword">int</span>[] outputs = matrix.GetColumn(<span class="highlight-number">1</span>).ToInt32(); <span class="highlight-comment">// Label column</span> 


<span class="highlight-comment">// Create a multi-class SVM for one input (Age) and three classes (Label)</span> 
<span class="highlight-keyword">var</span> machine = <span class="highlight-keyword">new</span> MulticlassSupportVectorMachine(inputs: <span class="highlight-number">1</span>, classes: <span class="highlight-number">3</span>);

<span class="highlight-comment">// Create a Multi-class learning algorithm for the machine</span> 
<span class="highlight-keyword">var</span> teacher = <span class="highlight-keyword">new</span> MulticlassSupportVectorLearning(machine, inputs, outputs);

<span class="highlight-comment">// Configure the learning algorithm to use SMO to train the</span> 
<span class="highlight-comment">//  underlying SVMs in each of the binary class subproblems.</span>
teacher.Algorithm = (svm, classInputs, classOutputs, i, j) =&gt;
    <span class="highlight-keyword">new</span> SequentialMinimalOptimization(svm, classInputs, classOutputs);

<span class="highlight-comment">// Run the learning algorithm</span> 
<span class="highlight-keyword">double</span> error = teacher.Run(); <span class="highlight-comment">// error will be zero</span> 


<span class="highlight-comment">// After we have learned the machine, we can use it to classify</span> 
<span class="highlight-comment">// new data points, and use the codebook to translate the machine</span> 
<span class="highlight-comment">// outputs to the original text labels:</span> 

<span class="highlight-keyword">string</span> result1 = codebook.Translate(<span class="highlight-literal">"Label"</span>, machine.Compute(<span class="highlight-number">10</span>)); <span class="highlight-comment">// child</span> 
<span class="highlight-keyword">string</span> result2 = codebook.Translate(<span class="highlight-literal">"Label"</span>, machine.Compute(<span class="highlight-number">40</span>)); <span class="highlight-comment">// adult</span> 
<span class="highlight-keyword">string</span> result3 = codebook.Translate(<span class="highlight-literal">"Label"</span>, machine.Compute(<span class="highlight-number">70</span>)); <span class="highlight-comment">// elder</span></pre></div><div id="ID0EACAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>// Now we will be able to feed this matrix to any machine learning 
// algorithm without having to worry about text labels in our data: 

// Use the first column as input and the second column a output: 

double[][] inputs = matrix.GetColumns(0);      // Age column 
int[] outputs = matrix.GetColumn(1).ToInt32(); // Label column 


// Create a multi-class SVM for one input (Age) and three classes (Label) 
var machine = new MulticlassSupportVectorMachine(inputs: 1, classes: 3);

// Create a Multi-class learning algorithm for the machine 
var teacher = new MulticlassSupportVectorLearning(machine, inputs, outputs);

// Configure the learning algorithm to use SMO to train the 
//  underlying SVMs in each of the binary class subproblems.
teacher.Algorithm = (svm, classInputs, classOutputs, i, j) =&gt;
    new SequentialMinimalOptimization(svm, classInputs, classOutputs);

// Run the learning algorithm 
double error = teacher.Run(); // error will be zero 


// After we have learned the machine, we can use it to classify 
// new data points, and use the codebook to translate the machine 
// outputs to the original text labels: 

string result1 = codebook.Translate("Label", machine.Compute(10)); // child 
string result2 = codebook.Translate("Label", machine.Compute(40)); // adult 
string result3 = codebook.Translate("Label", machine.Compute(70)); // elder</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EACAAAAA');</script><a name="seeAlsoSection"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div class="seeAlsoStyle"><a href="AllMembers_T_Accord_Statistics_Filters_Codification.htm" target="">Codification Members</a></div><div class="seeAlsoStyle"><a href="N_Accord_Statistics_Filters.htm" target="">Accord.Statistics.Filters Namespace</a></div><div class="seeAlsoStyle"><a href="T_Accord_Statistics_Filters_Normalization.htm" target="">Accord.Statistics.Filters<span id="ID0EBAAAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBAAAAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>Normalization</a></div></div>
        </div>
      </div>
    </div>
    <div id="OH_footer" class="OH_footer">
      <p>
        <a href="http://accord-net.github.io/" target="_blank">Accord.NET Framework</a> © 2009-2013. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.</p>
      <div class="OH_feedbacklink">
        <a href="mailto:?subject=Accord.NET+Framework+Codification+Class+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic.</div>
    </div>
  </body>
</html>