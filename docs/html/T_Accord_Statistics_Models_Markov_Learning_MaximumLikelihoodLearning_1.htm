<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp">
  <head>
    <link rel="SHORTCUT ICON" href="./../icons/favicon.ico" />
    <style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style>
    <link rel="stylesheet" type="text/css" href="./../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" />
    <style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style>
    <script src="./../scripts/branding.js" type="text/javascript">
      <!---->
    </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>MaximumLikelihoodLearning(TDistribution) Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="MaximumLikelihoodLearning%3CTDistribution%3E class" />
    <meta name="System.Keywords" content="Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning%3CTDistribution%3E class" />
    <meta name="System.Keywords" content="MaximumLikelihoodLearning%3CTDistribution%3E class, about MaximumLikelihoodLearning%3CTDistribution%3E class" />
    <meta name="System.Keywords" content="MaximumLikelihoodLearning(Of TDistribution) class" />
    <meta name="System.Keywords" content="Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning(Of TDistribution) class" />
    <meta name="System.Keywords" content="MaximumLikelihoodLearning(Of TDistribution) class, about MaximumLikelihoodLearning(Of TDistribution) class" />
    <meta name="Microsoft.Help.F1" content="Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning`1" />
    <meta name="Microsoft.Help.Id" content="T:Accord.Statistics.Models.Markov.Learning.MaximumLikelihoodLearning`1" />
    <meta name="Description" content="Maximum Likelihood learning algorithm for discrete-density Hidden Markov Models." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="'true'" />
    <meta name="container" content="Accord.Statistics.Models.Markov.Learning" />
    <meta name="file" content="T_Accord_Statistics_Models_Markov_Learning_MaximumLikelihoodLearning_1" />
    <meta name="guid" content="T_Accord_Statistics_Models_Markov_Learning_MaximumLikelihoodLearning_1" />
    
    <link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <link type="text/css" rel="stylesheet" href="./../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js">
      <!---->
    </script>
    <meta name="SelfBranded" content="true" />
  </head>
  <body onload="onLoad()" class="primary-mtps-offline-document">
    <div class="OH_outerDiv">
      <div class="OH_outerContent">
        <table class="TitleTable">
          <tr>
            <td class="OH_tdLogoColumn">
              <img alt="Accord.NET (logo)" src="./../icons/logo.png" />
            </td>
            <td class="OH_tdTitleColumn">MaximumLikelihoodLearning<span id="ID0EDBABAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDBABAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script><span class="typeparameter">TDistribution</span><span id="ID0EBBABAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBBABAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script> Class</td>
            <td class="OH_tdRunningTitleColumn">Accord.NET Framework</td>
          </tr>
        </table>
        <div id="mainSection">
          <div id="mainBody">
            <span class="introStyle">
              <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
              <a href="http://accord-net.github.io/docs/Index.html" target="_top">Show table of contents (goes to the online documentation index).</a>
              <br />
            </span>
            <div class="summary">
               Maximum Likelihood learning algorithm for discrete-density Hidden Markov Models.
            </div>
            <div class="OH_CollapsibleAreaRegion">
              <div class="OH_regiontitle">Inheritance Hierarchy</div>
              <div class="OH_CollapsibleArea_HrDiv">
                <hr class="OH_CollapsibleArea_Hr" />
              </div>
            </div>
            <div class="OH_clear"></div>
            <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
            <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="ID0EBEOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBEOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>Object</a>
            <br />  <span class="selflink">Accord.Statistics.Models.Markov.Learning<span id="ID0EEBOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EEBOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>MaximumLikelihoodLearning<span id="ID0ECBOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECBOAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TDistribution<span id="ID0EABOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EABOAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></span><br /><p></p><b>Namespace:</b> <a href="N_Accord_Statistics_Models_Markov_Learning.htm" target="">Accord.Statistics.Models.Markov.Learning</a><br /><b>Assembly:</b> <span sdata="assembly">Accord.Statistics</span> (in Accord.Statistics.dll) Version: 2.10.0.0 (2.10.0.4632)<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div id="snippetGroup_Syntax" class="code"><div id="ID0EABEAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EABEAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EABEAAAAA_tabimgleft"></div><div id="ID0EABEAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EABEAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EABEAAAAA_tab2" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>VB</a></div><div id="ID0EABEAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EABEAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EABEAAAAA_tabimgright"></div></div><div id="ID0EABEAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EABEAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EABEAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EABEAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EABEAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EABEAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EABEAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EABEAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">MaximumLikelihoodLearning</span>&lt;TDistribution&gt; : <span class="identifier">ISupervisedLearning</span> 
<span class="keyword">where</span> TDistribution : <span class="identifier">IDistribution</span></pre></div><div id="ID0EABEAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>public class MaximumLikelihoodLearning&lt;TDistribution&gt; : ISupervisedLearning 
where TDistribution : IDistribution</pre></div><div id="ID0EABEAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EABEAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EABEAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EABEAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EABEAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EABEAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EABEAAAAA');</script></div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Type Parameters</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><dl><dt><span class="parameter">TDistribution</span></dt><dd></dd></dl><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><p>
              The maximum likelihood estimate is a <a href="T_Accord_Statistics_Models_Markov_Learning_ISupervisedLearning.htm" target="">
              supervised learning algorithm</a>. It considers both the sequence
              of observations as well as the sequence of states in the Markov model
              are visible and thus during training. </p><p>
              Often, the Maximum Likelihood Estimate can be used to give a starting
              point to a unsupervised algorithm, making possible to use semi-supervised
              techniques with HMMs. It is possible, for example, to use MLE to guess
              initial values for an HMM given a small set of manually labelled labels,
              and then further estimate this model using the <a href="T_Accord_Statistics_Models_Markov_Learning_ViterbiLearning.htm" target="">
              Viterbi learning algorithm</a>.</p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><p>
              The following example comes from Prof. Yechiam Yemini slides on Hidden Markov
              Models, available at http://www.cs.columbia.edu/4761/notes07/chapter4.3-HMM.pdf.
              In this example, we will be specifying both the sequence of observations and
              the sequence of states assigned to each observation in each sequence to learn
              our Markov model.
            </p><div id="ID0EACAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EACAAAAA_tabs"></div><div id="ID0EACAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EACAAAAA_ViewColorized" href="#" onclick="javascript:ExchangeTitleContent('ID0EACAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EACAAAAA_copycode" href="#" onclick="javascript:CopyToClipboard('ID0EACAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EACAAAAA_PrintText" class="OH_PrintText" href="#" onclick="javascript:Print('ID0EACAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EACAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">// Those are the observation sequences. Each sequence contains a variable number</span> 
<span class="highlight-comment">// of observation (athought in this example they have all the same length, this</span> 
<span class="highlight-comment">// is just a coincidence and not something required).</span> 

<span class="highlight-keyword">int</span>[][] observations = 
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span> }, 
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span> },
};

<span class="highlight-comment">// Now those are the visible states associated with each observation in each </span> 
<span class="highlight-comment">// observation sequence above. Note that there is always one state assigned</span> 
<span class="highlight-comment">// to each observation, so the lengths of the sequence of observations and </span> 
<span class="highlight-comment">// the sequence of states must always match.</span> 

<span class="highlight-keyword">int</span>[][] paths = 
{
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">1</span> },
    <span class="highlight-keyword">new</span> <span class="highlight-keyword">int</span>[] { <span class="highlight-number">0</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">1</span>,<span class="highlight-number">0</span>,<span class="highlight-number">0</span> },
};

<span class="highlight-comment">// Since the observation sequences are composed of discrete symbols, we can specify</span> 
<span class="highlight-comment">// a GeneralDiscreteDistribution to simulate a standard discrete HiddenMarkovModel.</span> 
<span class="highlight-keyword">var</span> initial = <span class="highlight-keyword">new</span> GeneralDiscreteDistribution(symbols: <span class="highlight-number">2</span>);

<span class="highlight-comment">// Create our Markov model with two states (0, 1) and two symbols (0, 1)</span>
HiddenMarkovModel model = <span class="highlight-keyword">new</span> HiddenMarkovModel&lt;(states: <span class="highlight-number">2</span>, symbols: <span class="highlight-number">2</span>);

<span class="highlight-comment">// Now we can create our learning algorithm</span>
MaximumLikelihoodLearning teacher = <span class="highlight-keyword">new</span> MaximumLikelihoodLearning(model)
{
   <span class="highlight-comment">// Set some options</span>
   UseLaplaceRule = <span class="highlight-keyword">false</span>
};

<span class="highlight-comment">// and finally learn a model using the algorithm</span> 
<span class="highlight-keyword">double</span> logLikelihood = teacher.Run(observations, paths);


<span class="highlight-comment">// To check what has been learned, we can extract the emission</span> 
<span class="highlight-comment">// and transition matrices, as well as the initial probability</span> 
<span class="highlight-comment">// vector from the HMM to compare against expected values:</span> 

<span class="highlight-keyword">var</span> pi = Matrix.Exp(model.Probabilities); <span class="highlight-comment">// { 0.5, 0.5 }</span> 
<span class="highlight-keyword">var</span> A = Matrix.Exp(model.Transitions);    <span class="highlight-comment">// { { 7/20, 13/20 }, { 14/20, 6/20 } }</span> 
<span class="highlight-keyword">var</span> B = Matrix.Exp(model.Emissions);      <span class="highlight-comment">// { { 17/25, 8/25 }, { 19/23, 4/23 } }</span></pre></div><div id="ID0EACAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>// Those are the observation sequences. Each sequence contains a variable number 
// of observation (athought in this example they have all the same length, this 
// is just a coincidence and not something required). 

int[][] observations = 
{
    new int[] { 0,0,0,1,0,0 }, 
    new int[] { 1,0,0,1,0,0 },
    new int[] { 0,0,1,0,0,0 },
    new int[] { 0,0,0,0,1,0 },
    new int[] { 1,0,0,0,1,0 },
    new int[] { 0,0,0,1,1,0 },
    new int[] { 1,0,0,0,0,0 },
    new int[] { 1,0,1,0,0,0 },
};

// Now those are the visible states associated with each observation in each  
// observation sequence above. Note that there is always one state assigned 
// to each observation, so the lengths of the sequence of observations and  
// the sequence of states must always match. 

int[][] paths = 
{
    new int[] { 0,0,1,0,1,0 },
    new int[] { 1,0,1,0,1,0 },
    new int[] { 1,0,0,1,1,0 },
    new int[] { 1,0,1,1,1,0 },
    new int[] { 1,0,0,1,0,1 },
    new int[] { 0,0,1,0,0,1 },
    new int[] { 0,0,1,1,0,1 },
    new int[] { 0,1,1,1,0,0 },
};

// Since the observation sequences are composed of discrete symbols, we can specify 
// a GeneralDiscreteDistribution to simulate a standard discrete HiddenMarkovModel. 
var initial = new GeneralDiscreteDistribution(symbols: 2);

// Create our Markov model with two states (0, 1) and two symbols (0, 1)
HiddenMarkovModel model = new HiddenMarkovModel&lt;(states: 2, symbols: 2);

// Now we can create our learning algorithm
MaximumLikelihoodLearning teacher = new MaximumLikelihoodLearning(model)
{
   // Set some options
   UseLaplaceRule = false
};

// and finally learn a model using the algorithm 
double logLikelihood = teacher.Run(observations, paths);


// To check what has been learned, we can extract the emission 
// and transition matrices, as well as the initial probability 
// vector from the HMM to compare against expected values: 

var pi = Matrix.Exp(model.Probabilities); // { 0.5, 0.5 } 
var A = Matrix.Exp(model.Transitions);    // { { 7/20, 13/20 }, { 14/20, 6/20 } } 
var B = Matrix.Exp(model.Emissions);      // { { 17/25, 8/25 }, { 19/23, 4/23 } }</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EACAAAAA');</script><a name="seeAlsoSection"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div class="seeAlsoStyle"><a href="AllMembers_T_Accord_Statistics_Models_Markov_Learning_MaximumLikelihoodLearning_1.htm" target="">MaximumLikelihoodLearning<span id="ID0EDAEAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDAEAAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TDistribution<span id="ID0EBAEAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBAEAAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script> Members</a></div><div class="seeAlsoStyle"><a href="N_Accord_Statistics_Models_Markov_Learning.htm" target="">Accord.Statistics.Models.Markov.Learning Namespace</a></div><div class="seeAlsoStyle"><a href="T_Accord_Statistics_Models_Markov_Learning_MaximumLikelihoodLearning.htm" target="">Accord.Statistics.Models.Markov.Learning<span id="ID0EBACAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBACAAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>MaximumLikelihoodLearning</a></div><div class="seeAlsoStyle"><a href="T_Accord_Statistics_Models_Markov_Learning_ViterbiLearning_1.htm" target="">Accord.Statistics.Models.Markov.Learning<span id="ID0EEABAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EEABAAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>ViterbiLearning<span id="ID0ECABAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABAAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TDistribution<span id="ID0EAABAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABAAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></div><div class="seeAlsoStyle"><a href="T_Accord_Statistics_Models_Markov_HiddenMarkovModel_1.htm" target="">Accord.Statistics.Models.Markov<span id="ID0EEAAAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EEAAAAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>HiddenMarkovModel<span id="ID0ECAAAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECAAAAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TDistribution<span id="ID0EAAAAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAAAAAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></div></div>
        </div>
      </div>
    </div>
    <div id="OH_footer" class="OH_footer">
      <p>
        <a href="http://accord-net.github.io/" target="_blank">Accord.NET Framework</a> © 2009-2013. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.</p>
      <div class="OH_feedbacklink">
        <a href="mailto:?subject=Accord.NET+Framework+MaximumLikelihoodLearning(TDistribution)+Class+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic.</div>
    </div>
  </body>
</html>