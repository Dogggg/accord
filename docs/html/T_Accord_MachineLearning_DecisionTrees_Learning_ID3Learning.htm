<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp">
  <head>
    <link rel="SHORTCUT ICON" href="./../icons/favicon.ico" />
    <style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style>
    <link rel="stylesheet" type="text/css" href="./../Styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="./../Styles/branding-en-US.css" />
    <style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style>
    <script src="./../Scripts/branding.js" type="text/javascript">
      <!---->
    </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>ID3Learning Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="ID3Learning class" />
    <meta name="System.Keywords" content="Accord.MachineLearning.DecisionTrees.Learning.ID3Learning class" />
    <meta name="System.Keywords" content="ID3Learning class, about ID3Learning class" />
    <meta name="Microsoft.Help.F1" content="Accord.MachineLearning.DecisionTrees.Learning.ID3Learning" />
    <meta name="Microsoft.Help.Id" content="T:Accord.MachineLearning.DecisionTrees.Learning.ID3Learning" />
    <meta name="Description" content="ID3 (Iterative Dichotomiser 3) learning algorithm for Decision Trees." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="'true'" />
    <meta name="container" content="Accord.MachineLearning.DecisionTrees.Learning" />
    <meta name="file" content="T_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning" />
    <meta name="guid" content="T_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning" />
    
    <link type="text/css" rel="stylesheet" href="./../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js">
      <!---->
    </script>
    <meta name="SelfBranded" content="true" />
  </head>
  <body onload="onLoad()" class="primary-mtps-offline-document">
    <div class="OH_outerDiv">
      <div class="OH_outerContent">
        <div class="OH_topic">
          <div class="OH_title">
            <table>
              <tr>
                <td class="OH_tdTitleColumn">ID3Learning Class</td>
                <td class="OH_tdLogoColumn">
                  <img align="right" src="./../icons/Accord.NET.png" />
                </td>
              </tr>
            </table>
          </div>
        </div>
        <div class="OH_feedbacklink">
          <a href="mailto:?subject=Accord.NET+Framework+ID3Learning+Class+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a>
        </div>
        <div id="mainSection">
          <div id="mainBody">
            <span class="introStyle">
              <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
              <a href="http://accord.googlecode.com/svn/docs/Index.html" target="_top">Show table of contents (goes to the online documentation index).</a>
              <br />
            </span>
            <div class="summary">
               ID3 (Iterative Dichotomiser 3) learning algorithm
               for <a href="T_Accord_MachineLearning_DecisionTrees_DecisionTree.htm" target="">Decision Trees</a>.
             </div>
            <div class="OH_CollapsibleAreaRegion">
              <div class="OH_regiontitle">Inheritance Hierarchy</div>
              <div class="OH_CollapsibleArea_HrDiv">
                <hr class="OH_CollapsibleArea_Hr" />
              </div>
            </div>
            <div class="OH_clear"></div>
            <img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" />
            <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span id="ID0EBEOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBEOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>Object</a>
            <br />  <span class="selflink">Accord.MachineLearning.DecisionTrees.Learning<span id="ID0EBBOAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBBOAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>ID3Learning</span><br /><p></p><b>Namespace:</b> <a href="N_Accord_MachineLearning_DecisionTrees_Learning.htm" target="">Accord.MachineLearning.DecisionTrees.Learning</a><br /><b>Assembly:</b> <span sdata="assembly">Accord.MachineLearning</span> (in Accord.MachineLearning.dll) Version: 2.8.0.0 (2.8.0.0)<div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Syntax</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div id="snippetGroup_Syntax" class="code"><div id="ID0EAAEAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EAAEAAAAA_tabs"><div class="OH_CodeSnippetContainerTabLeftActive" id="ID0EAAEAAAAA_tabimgleft"></div><div id="ID0EAAEAAAAA_tab1" class="OH_CodeSnippetContainerTabActive" EnableCopyCode="true"><a href="#" onclick="javascript:ChangeTab('ID0EAAEAAAAA','C#','1','4');return false;">C#</a></div><div id="ID0EAAEAAAAA_tab2" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>VB</a></div><div id="ID0EAAEAAAAA_tab3" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>C++</a></div><div id="ID0EAAEAAAAA_tab4" class="OH_CodeSnippetContainerTabDisabledNotFirst" EnableCopyCode="true" disabled="true"><a>F#</a></div><div class="OH_CodeSnippetContainerTabRight" id="ID0EAAEAAAAA_tabimgright"></div></div><div id="ID0EAAEAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EAAEAAAAA_ViewColorized" href="javascript:ExchangeTitleContent('ID0EAAEAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EAAEAAAAA_copycode" href="javascript:CopyToClipboard('ID0EAAEAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EAAEAAAAA_PrintText" class="OH_PrintText" href="javascript:Print('ID0EAAEAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EAAEAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre>[<a href="http://msdn2.microsoft.com/en-us/library/bcfsa90a" target="_blank">SerializableAttribute</a>]
<span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">ID3Learning</span></pre></div><div id="ID0EAAEAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>[SerializableAttribute]
public class ID3Learning</pre></div><div id="ID0EAAEAAAAA_code_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Plain_Div2" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Plain_Div3" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div><div id="ID0EAAEAAAAA_code_Plain_Div4" class="OH_CodeSnippetContainerCode" style="display: none"><pre /></div></div></div><script>addSpecificTextLanguageTagSet('ID0EAAEAAAAA');</script></div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Remarks</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><p>
               References:
               <ul><li>
                   Quinlan, J. R 1986. Induction of Decision Trees.
                   Mach. Learn. 1, 1 (Mar. 1986), 81-106.</li><li>
                   Mitchell, T. M. Machine Learning. McGraw-Hill, 1997. pp. 55-58. </li><li><img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" /><a href="http://en.wikipedia.org/wiki/ID3_algorithm" target="_blank">
                   Wikipedia, the free enclyclopedia. ID3 algorithm. Available on 
                   http://en.wikipedia.org/wiki/ID3_algorithm </a></li></ul></p><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Examples</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><p>
               In this example, we will be using the famous Play Tennis example by Tom Mitchell (1998).
               In Mitchell's example, one would like to infer if a person would play tennis or not
               based solely on four input variables. Those variables are all categorical, meaning that
               there is no order between the possible values for the variable (i.e. there is no order
               relationship between Sunny and Rain, one is not bigger nor smaller than the other, but are 
               just distinct). Moreover, the rows, or instances presented above represent days on which the
               behavior of the person has been registered and annotated, pretty much building our set of 
               observation instances for learning:</p><div id="ID0EICAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EICAAAAA_tabs"></div><div id="ID0EICAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EICAAAAA_ViewColorized" href="javascript:ExchangeTitleContent('ID0EICAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EICAAAAA_copycode" href="javascript:CopyToClipboard('ID0EICAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EICAAAAA_PrintText" class="OH_PrintText" href="javascript:Print('ID0EICAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EICAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre>DataTable data = <span class="highlight-keyword">new</span> DataTable(<span class="highlight-literal">"Mitchell's Tennis Example"</span>);

data.Columns.Add(<span class="highlight-literal">"Day"</span>, <span class="highlight-literal">"Outlook"</span>, <span class="highlight-literal">"Temperature"</span>, <span class="highlight-literal">"Humidity"</span>, <span class="highlight-literal">"Wind"</span>, <span class="highlight-literal">"PlayTennis"</span>);

data.Rows.Add(   <span class="highlight-literal">"D1"</span>,   <span class="highlight-literal">"Sunny"</span>,      <span class="highlight-literal">"Hot"</span>,       <span class="highlight-literal">"High"</span>,   <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"No"</span>  );
data.Rows.Add(   <span class="highlight-literal">"D2"</span>,   <span class="highlight-literal">"Sunny"</span>,      <span class="highlight-literal">"Hot"</span>,       <span class="highlight-literal">"High"</span>,  <span class="highlight-literal">"Strong"</span>,   <span class="highlight-literal">"No"</span>  ); 
data.Rows.Add(   <span class="highlight-literal">"D3"</span>,  <span class="highlight-literal">"Overcast"</span>,    <span class="highlight-literal">"Hot"</span>,       <span class="highlight-literal">"High"</span>,   <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"Yes"</span> );
data.Rows.Add(   <span class="highlight-literal">"D4"</span>,   <span class="highlight-literal">"Rain"</span>,       <span class="highlight-literal">"Mild"</span>,      <span class="highlight-literal">"High"</span>,   <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"Yes"</span> ); 
data.Rows.Add(   <span class="highlight-literal">"D5"</span>,   <span class="highlight-literal">"Rain"</span>,       <span class="highlight-literal">"Cool"</span>,     <span class="highlight-literal">"Normal"</span>,  <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"Yes"</span> ); 
data.Rows.Add(   <span class="highlight-literal">"D6"</span>,   <span class="highlight-literal">"Rain"</span>,       <span class="highlight-literal">"Cool"</span>,     <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Strong"</span>,   <span class="highlight-literal">"No"</span>  ); 
data.Rows.Add(   <span class="highlight-literal">"D7"</span>,  <span class="highlight-literal">"Overcast"</span>,    <span class="highlight-literal">"Cool"</span>,     <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Strong"</span>,   <span class="highlight-literal">"Yes"</span> );
data.Rows.Add(   <span class="highlight-literal">"D8"</span>,   <span class="highlight-literal">"Sunny"</span>,      <span class="highlight-literal">"Mild"</span>,      <span class="highlight-literal">"High"</span>,   <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"No"</span>  );  
data.Rows.Add(   <span class="highlight-literal">"D9"</span>,   <span class="highlight-literal">"Sunny"</span>,      <span class="highlight-literal">"Cool"</span>,     <span class="highlight-literal">"Normal"</span>,  <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"Yes"</span> ); 
data.Rows.Add(   <span class="highlight-literal">"D10"</span>, <span class="highlight-literal">"Rain"</span>,        <span class="highlight-literal">"Mild"</span>,     <span class="highlight-literal">"Normal"</span>,  <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"Yes"</span> ); 
data.Rows.Add(   <span class="highlight-literal">"D11"</span>,  <span class="highlight-literal">"Sunny"</span>,      <span class="highlight-literal">"Mild"</span>,     <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Strong"</span>,   <span class="highlight-literal">"Yes"</span> );
data.Rows.Add(   <span class="highlight-literal">"D12"</span>, <span class="highlight-literal">"Overcast"</span>,    <span class="highlight-literal">"Mild"</span>,      <span class="highlight-literal">"High"</span>,  <span class="highlight-literal">"Strong"</span>,   <span class="highlight-literal">"Yes"</span> ); 
data.Rows.Add(   <span class="highlight-literal">"D13"</span>, <span class="highlight-literal">"Overcast"</span>,    <span class="highlight-literal">"Hot"</span>,      <span class="highlight-literal">"Normal"</span>,  <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"Yes"</span> ); 
data.Rows.Add(   <span class="highlight-literal">"D14"</span>,  <span class="highlight-literal">"Rain"</span>,       <span class="highlight-literal">"Mild"</span>,      <span class="highlight-literal">"High"</span>,  <span class="highlight-literal">"Strong"</span>,   <span class="highlight-literal">"No"</span>  );</pre></div><div id="ID0EICAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>DataTable data = new DataTable("Mitchell's Tennis Example");

data.Columns.Add("Day", "Outlook", "Temperature", "Humidity", "Wind", "PlayTennis");

data.Rows.Add(   "D1",   "Sunny",      "Hot",       "High",   "Weak",    "No"  );
data.Rows.Add(   "D2",   "Sunny",      "Hot",       "High",  "Strong",   "No"  ); 
data.Rows.Add(   "D3",  "Overcast",    "Hot",       "High",   "Weak",    "Yes" );
data.Rows.Add(   "D4",   "Rain",       "Mild",      "High",   "Weak",    "Yes" ); 
data.Rows.Add(   "D5",   "Rain",       "Cool",     "Normal",  "Weak",    "Yes" ); 
data.Rows.Add(   "D6",   "Rain",       "Cool",     "Normal", "Strong",   "No"  ); 
data.Rows.Add(   "D7",  "Overcast",    "Cool",     "Normal", "Strong",   "Yes" );
data.Rows.Add(   "D8",   "Sunny",      "Mild",      "High",   "Weak",    "No"  );  
data.Rows.Add(   "D9",   "Sunny",      "Cool",     "Normal",  "Weak",    "Yes" ); 
data.Rows.Add(   "D10", "Rain",        "Mild",     "Normal",  "Weak",    "Yes" ); 
data.Rows.Add(   "D11",  "Sunny",      "Mild",     "Normal", "Strong",   "Yes" );
data.Rows.Add(   "D12", "Overcast",    "Mild",      "High",  "Strong",   "Yes" ); 
data.Rows.Add(   "D13", "Overcast",    "Hot",      "Normal",  "Weak",    "Yes" ); 
data.Rows.Add(   "D14",  "Rain",       "Mild",      "High",  "Strong",   "No"  );</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EICAAAAA');</script><p>
               In order to try to learn a decision tree, we will first convert this problem to a more simpler
               representation. Since all variables are categories, it does not matter if they are represented
               as strings, or numbers, since both are just symbols for the event they represent. Since numbers
               are more easily representable than text string, we will convert the problem to use a discrete 
               alphabet through the use of a <a href="T_Accord_Statistics_Filters_Codification.htm" target="">codebook</a>.</p><p>
               A codebook effectively transforms any distinct possible value for a variable into an integer 
               symbol. For example, “Sunny” could as well be represented by the integer label 0, “Overcast” 
               by “1”, Rain by “2”, and the same goes by for the other variables. So:</p><div id="ID0EFCAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EFCAAAAA_tabs"></div><div id="ID0EFCAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EFCAAAAA_ViewColorized" href="javascript:ExchangeTitleContent('ID0EFCAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EFCAAAAA_copycode" href="javascript:CopyToClipboard('ID0EFCAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EFCAAAAA_PrintText" class="OH_PrintText" href="javascript:Print('ID0EFCAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EFCAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">// Create a new codification codebook to </span> 
<span class="highlight-comment">// convert strings into integer symbols</span>
Codification codebook = <span class="highlight-keyword">new</span> Codification(data);

<span class="highlight-comment">// Translate our training data into integer symbols using our codebook:</span>
DataTable symbols = codebook.Apply(data); 
<span class="highlight-keyword">int</span>[][] inputs  = symbols.ToIntArray(<span class="highlight-literal">"Outlook"</span>, <span class="highlight-literal">"Temperature"</span>, <span class="highlight-literal">"Humidity"</span>, <span class="highlight-literal">"Wind"</span>); 
<span class="highlight-keyword">int</span>[]   outputs = symbols.ToIntArray(<span class="highlight-literal">"PlayTennis"</span>).GetColumn(<span class="highlight-number">0</span>);</pre></div><div id="ID0EFCAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>// Create a new codification codebook to  
// convert strings into integer symbols
Codification codebook = new Codification(data);

// Translate our training data into integer symbols using our codebook:
DataTable symbols = codebook.Apply(data); 
int[][] inputs  = symbols.ToIntArray("Outlook", "Temperature", "Humidity", "Wind"); 
int[]   outputs = symbols.ToIntArray("PlayTennis").GetColumn(0);</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EFCAAAAA');</script><p>
               Now that we already have our learning input/ouput pairs, we should specify our
               decision tree. We will be trying to build a tree to predict the last column, entitled
               “PlayTennis”. For this, we will be using the “Outlook”, “Temperature”, “Humidity” and
               “Wind” as predictors (variables which will we will use for our decision). Since those
               are categorical, we must specify, at the moment of creation of our tree, the
               characteristics of each of those variables. So:
             </p><div id="ID0EDCAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EDCAAAAA_tabs"></div><div id="ID0EDCAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EDCAAAAA_ViewColorized" href="javascript:ExchangeTitleContent('ID0EDCAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EDCAAAAA_copycode" href="javascript:CopyToClipboard('ID0EDCAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EDCAAAAA_PrintText" class="OH_PrintText" href="javascript:Print('ID0EDCAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EDCAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">// Gather information about decision variables</span>
DecisionVariable[] attributes =
{
  <span class="highlight-keyword">new</span> DecisionVariable(<span class="highlight-literal">"Outlook"</span>,     <span class="highlight-number">3</span>), <span class="highlight-comment">// 3 possible values (Sunny, overcast, rain)</span> 
  <span class="highlight-keyword">new</span> DecisionVariable(<span class="highlight-literal">"Temperature"</span>, <span class="highlight-number">3</span>), <span class="highlight-comment">// 3 possible values (Hot, mild, cool)  </span> 
  <span class="highlight-keyword">new</span> DecisionVariable(<span class="highlight-literal">"Humidity"</span>,    <span class="highlight-number">2</span>), <span class="highlight-comment">// 2 possible values (High, normal)    </span> 
  <span class="highlight-keyword">new</span> DecisionVariable(<span class="highlight-literal">"Wind"</span>,        <span class="highlight-number">2</span>)  <span class="highlight-comment">// 2 possible values (Weak, strong) </span>
};

<span class="highlight-keyword">int</span> classCount = <span class="highlight-number">2</span>; <span class="highlight-comment">// 2 possible output values for playing tennis: yes or no</span> 

<span class="highlight-comment">//Create the decision tree using the attributes and classes</span>
DecisionTree tree = <span class="highlight-keyword">new</span> DecisionTree(attributes, classCount);</pre></div><div id="ID0EDCAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>// Gather information about decision variables
DecisionVariable[] attributes =
{
  new DecisionVariable("Outlook",     3), // 3 possible values (Sunny, overcast, rain) 
  new DecisionVariable("Temperature", 3), // 3 possible values (Hot, mild, cool)   
  new DecisionVariable("Humidity",    2), // 2 possible values (High, normal)     
  new DecisionVariable("Wind",        2)  // 2 possible values (Weak, strong) 
};

int classCount = 2; // 2 possible output values for playing tennis: yes or no 

//Create the decision tree using the attributes and classes
DecisionTree tree = new DecisionTree(attributes, classCount);</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EDCAAAAA');</script><p>Now we have created our decision tree. Unfortunately, it is not really very useful,
             since we haven't taught it the problem we are trying to predict. So now we must instantiate
             a learning algorithm to make it useful. For this task, in which we have only categorical 
             variables, the simplest choice is to use the ID3 algorithm by Quinlan. Let’s do it:</p><div id="ID0EBCAAAAA" class="OH_CodeSnippetContainer"><div class="OH_CodeSnippetContainerTabs" id="ID0EBCAAAAA_tabs"></div><div id="ID0EBCAAAAA_codecollection" class="OH_CodeSnippetContainerCodeCollection"><div class="OH_CodeSnippetToolBar"><div class="OH_CodeSnippetToolBarText"><a id="ID0EBCAAAAA_ViewColorized" href="javascript:ExchangeTitleContent('ID0EBCAAAAA','4')" title="View Colorized" style="display: none">View Colorized</a><a id="ID0EBCAAAAA_copycode" href="javascript:CopyToClipboard('ID0EBCAAAAA','4')" title="Copy to Clipboard">Copy to Clipboard</a><a id="ID0EBCAAAAA_PrintText" class="OH_PrintText" href="javascript:Print('ID0EBCAAAAA','4')" title="Print">Print</a></div></div><div id="ID0EBCAAAAA_code_Div1" class="OH_CodeSnippetContainerCode" style="display: block"><pre><span class="highlight-comment">// Create a new instance of the ID3 algorithm</span>
ID3Learning id3learning = <span class="highlight-keyword">new</span> ID3Learning(tree);

<span class="highlight-comment">// Learn the training instances!</span>
id3learning.Run(inputs, outputs);</pre></div><div id="ID0EBCAAAAA_code_Plain_Div1" class="OH_CodeSnippetContainerCode" style="display: none"><pre>// Create a new instance of the ID3 algorithm
ID3Learning id3learning = new ID3Learning(tree);

// Learn the training instances!
id3learning.Run(inputs, outputs);</pre></div></div></div><script>addSpecificTextLanguageTagSet('ID0EBCAAAAA');</script><p>The tree can now be queried for new examples through its <a href="M_Accord_MachineLearning_DecisionTrees_DecisionTree_Compute.htm" target="">Compute(<span id="ID0EDBACAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EDBACAAAAA?vb=|cpp=array&lt;|cs=|fs=|nu=");
				</script>Double<span id="ID0EBBACAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBBACAAAAA?vb=()|cpp=&gt;|cs=[]|fs=[]|nu=[]");
				</script>)</a> method.
             </p><a name="seeAlsoSection"><!----></a><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">See Also</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><div class="seeAlsoStyle"><a href="AllMembers_T_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning.htm" target="">ID3Learning Members</a></div><div class="seeAlsoStyle"><a href="N_Accord_MachineLearning_DecisionTrees_Learning.htm" target="">Accord.MachineLearning.DecisionTrees.Learning Namespace</a></div></div>
        </div>
      </div>
    </div>
    <div id="OH_footer" class="OH_footer">
      <p>
        <a href="http://accord.googlecode.com" target="_blank">Accord.NET Framework</a> © 2009-2012. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.</p>
      <div class="OH_feedbacklink">
        <a href="mailto:?subject=Accord.NET+Framework+ID3Learning+Class+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic.</div>
    </div>
  </body>
</html>