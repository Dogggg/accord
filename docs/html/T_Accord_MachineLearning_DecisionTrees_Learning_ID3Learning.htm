<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:msxsl="urn:schemas-microsoft-com:xslt">
  <head>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" />
    <META NAME="save" CONTENT="history" />
    <title>ID3Learning Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="ID3Learning class" />
    <meta name="System.Keywords" content="Accord.MachineLearning.DecisionTrees.Learning.ID3Learning class" />
    <meta name="System.Keywords" content="ID3Learning class, about ID3Learning class" />
    <meta name="Microsoft.Help.F1" content="Accord.MachineLearning.DecisionTrees.Learning.ID3Learning" />
    <meta name="Microsoft.Help.Id" content="T:Accord.MachineLearning.DecisionTrees.Learning.ID3Learning" />
    <meta name="Description" content="ID3 (Iterative Dichotomiser 3) learning algorithm for Decision Trees." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <link rel="stylesheet" type="text/css" href="../styles/Presentation.css" />
    <link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" />
    <script type="text/javascript" src="../scripts/EventUtilities.js"> </script>
    <script type="text/javascript" src="../scripts/SplitScreen.js"> </script>
    <script type="text/javascript" src="../scripts/Dropdown.js"> </script>
    <script type="text/javascript" src="../scripts/script_manifold.js"> </script>
    <script type="text/javascript" src="../scripts/script_feedBack.js"> </script>
    <script type="text/javascript" src="../scripts/CheckboxMenu.js"> </script>
    <script type="text/javascript" src="../scripts/CommonUtilities.js"> </script>
    <meta name="container" content="Accord.MachineLearning.DecisionTrees.Learning" />
    <meta name="file" content="T_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning" />
    <meta name="guid" content="T_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning" />
    <xml>
      <MSHelp:Attr Name="AssetID" Value="T:Accord.MachineLearning.DecisionTrees.Learning.ID3Learning" />
      <MSHelp:TOCTitle Title="ID3Learning Class" />
      <MSHelp:RLTitle Title="ID3Learning Class (Accord.MachineLearning.DecisionTrees.Learning)" />
      <MSHelp:Keyword Index="A" Term="T:Accord.MachineLearning.DecisionTrees.Learning.ID3Learning" />
      <MSHelp:Keyword Index="A" Term="frlrfAccordMachineLearningDecisionTreesLearningID3LearningClassTopic" />
      <MSHelp:Keyword Index="K" Term="ID3Learning class" />
      <MSHelp:Keyword Index="K" Term="Accord.MachineLearning.DecisionTrees.Learning.ID3Learning class" />
      <MSHelp:Keyword Index="K" Term="ID3Learning class, about ID3Learning class" />
      <MSHelp:Keyword Index="F" Term="Accord.MachineLearning.DecisionTrees.Learning.ID3Learning" />
      <MSHelp:Attr Name="HelpPriority" Value="2" />
      <MSHelp:Attr Name="APIType" Value="Managed" />
      <MSHelp:Attr Name="APILocation" Value="Accord.MachineLearning.dll" />
      <MSHelp:Attr Name="APIName" Value="Accord.MachineLearning.DecisionTrees.Learning.ID3Learning" />
      <MSHelp:Attr Name="DevLang" Value="CSharp" />
      <MSHelp:Attr Name="DevLang" Value="VB" />
      <MSHelp:Attr Name="Locale" Value="en-us" />
      <MSHelp:Attr Name="TopicType" Value="kbSyntax" />
      <MSHelp:Attr Name="TopicType" Value="apiref" />
      <MSHelp:Attr Name="Abstract" Value="ID3 (Iterative Dichotomiser 3) learning algorithm for Decision Trees." />
      <MSHelp:Attr Name="AssemblyVersion" Value="2.6.1.0" />
    </xml>
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"> </script>
  </head>
  <body>
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <input type="hidden" id="hiddenScrollOffset" />
    <img id="collapseImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" alt="Collapse image" title="Collapse image" />
    <img id="expandImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" alt="Expand Image" title="Expand Image" />
    <img id="collapseAllImage" style="display:none; height:0; width:0;" src="../icons/collapse_all.gif" />
    <img id="expandAllImage" style="display:none; height:0; width:0;" src="../icons/expand_all.gif" />
    <img id="dropDownImage" style="display:none; height:0; width:0;" src="../icons/dropdown.gif" />
    <img id="dropDownHoverImage" style="display:none; height:0; width:0;" src="../icons/dropdownHover.gif" />
    <img id="copyImage" style="display:none; height:0; width:0;" src="../icons/copycode.gif" alt="Copy image" title="Copy image" />
    <img id="copyHoverImage" style="display:none; height:0; width:0;" src="../icons/copycodeHighlight.gif" alt="CopyHover image" title="CopyHover image" />
    <div id="header">
      <table cellspacing="0" cellpadding="0">
        <tr>
          <td>
            <table id="topTable" cellspacing="0" cellpadding="0">
              <tr>
                <td>
                  <span onclick="ExpandCollapseAll(toggleAllImage)" style="cursor:default;" onkeypress="ExpandCollapseAll_CheckKey(toggleAllImage, event)" tabindex="0">
                    <img ID="toggleAllImage" class="toggleAll" src="../icons/collapse_all.gif" /> <label id="collapseAllLabel" for="toggleAllImage" style="display: none;">Collapse All</label><label id="expandAllLabel" for="toggleAllImage" style="display: none;">Expand All</label> </span>
                  <span>    </span>
                  <span id="devlangsDropdown" class="filter" tabindex="0">
                    <img id="devlangsDropdownImage" src="../icons/dropdown.gif" /> <label id="devlangsMenuAllLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: All </nobr></label><label id="devlangsMenuMultipleLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Multiple </nobr></label><label id="devlangsMenuCSharpLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: C# </nobr></label><label id="devlangsMenuVisualBasicLabel" for="devlangsDropdownImage" style="display: none;"><nobr>Code: Visual Basic </nobr></label></span>
                </td>
              </tr>
            </table>
            <div id="devlangsMenu">
              <input id="CSharpCheckbox" type="checkbox" data="CSharp,cs,'persist'" value="on" onClick="SetLanguage(this)" />
              <label class="checkboxLabel" for="CSharpCheckbox">C#</label>
              <br />
              <input id="VisualBasicCheckbox" type="checkbox" data="VisualBasic,vb,'persist'" value="on" onClick="SetLanguage(this)" />
              <label class="checkboxLabel" for="VisualBasicCheckbox">Visual Basic</label>
              <br />
            </div>
            <table id="bottomTable" cellpadding="0" cellspacing="0">
              <tr id="headerTableRow1">
                <td align="left">
                  <span id="runningHeaderText">Accord.NET Framework</span>
                </td>
              </tr>
              <tr id="headerTableRow2">
                <td align="left">
                  <span id="nsrTitle">ID3Learning Class</span>
                </td>
              </tr>
              <tr id="headerTableRow3">
                <td align="left">
                  <a href="AllMembers_T_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning.htm">Members</a> <a href="#exampleToggle" onclick="OpenSection(exampleToggle)">Example</a> <a href="#seeAlsoToggle" onclick="OpenSection(seeAlsoToggle)">See Also</a> <span id="headfeedbackarea" class="feedbackhead"><a href="javascript:SubmitFeedback('','Accord.NET Framework','','','','%0\dYour%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report,%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed,%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.%0\A%0\d','Customer%20Feedback');">Send Feedback</a></span></td>
              </tr>
            </table>
          </td>
          <td align="center" style="width: 1px; padding: 0px">
            <img src="../icons/Accord.NET.png" />
          </td>
        </tr>
      </table>
      <table id="gradientTable">
        <tr>
          <td class="nsrBottom" background="../icons/gradient.gif" />
        </tr>
      </table>
    </div>
    <div id="mainSection">
      <div id="mainBody">
        <div id="allHistory" class="saveHistory" onsave="saveAll()" onload="loadAll()" />
        <span style="color: DarkGray"></span>
        <div class="summary">
               ID3 (Iterative Dichotomiser 3) learning algorithm
               for <a href="T_Accord_MachineLearning_DecisionTrees_DecisionTree.htm">Decision Trees</a>.
             </div>
        <p />
        <b>Namespace:</b> <a href="N_Accord_MachineLearning_DecisionTrees_Learning.htm">Accord.MachineLearning.DecisionTrees.Learning</a><br /><b>Assembly:</b> <span sdata="assembly">Accord.MachineLearning</span> (in Accord.MachineLearning.dll) Version: 2.6.1.0 (2.6.1.0)<h1 class="heading"><span onclick="ExpandCollapse(syntaxToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(syntaxToggle, event)" tabindex="0"><img id="syntaxToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Syntax</span></h1><div id="syntaxSection" class="section" name="collapseableSection" style=""><div id="syntaxCodeBlocks" class="code"><span codeLanguage="CSharp"><table><tr><th>C#</th></tr><tr><td><pre xml:space="preserve">[<a href="http://msdn2.microsoft.com/en-us/library/bcfsa90a" target="_blank">SerializableAttribute</a>]
<span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">ID3Learning</span></pre></td></tr></table></span><span codeLanguage="VisualBasicDeclaration"><table><tr><th>Visual Basic</th></tr><tr><td><pre xml:space="preserve">&lt;<a href="http://msdn2.microsoft.com/en-us/library/bcfsa90a" target="_blank">SerializableAttribute</a>&gt; _
<span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">ID3Learning</span></pre></td></tr></table></span></div></div><h1 class="heading"><span onclick="ExpandCollapse(remarksToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(remarksToggle, event)" tabindex="0"><img id="remarksToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Remarks</span></h1><div id="remarksSection" class="section" name="collapseableSection" style=""><p>
               References:
               <ul><li>
                   Quinlan, J. R 1986. Induction of Decision Trees.
                   Mach. Learn. 1, 1 (Mar. 1986), 81-106.</li><li>
                   Mitchell, T. M. Machine Learning. McGraw-Hill, 1997. pp. 55-58. </li><li><a href="http://en.wikipedia.org/wiki/ID3_algorithm">
                   Wikipedia, the free enclyclopedia. ID3 algorithm. Available on 
                   http://en.wikipedia.org/wiki/ID3_algorithm </a></li></ul></p></div><h1 class="heading"><span onclick="ExpandCollapse(exampleToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(exampleToggle, event)" tabindex="0"><img id="exampleToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Examples</span></h1><div id="exampleSection" class="section" name="collapseableSection" style=""><p>
               In this example, we will be using the famous Play Tennis example by Tom Mitchell (1998).
               In Mitchell's example, one would like to infer if a person would play tennis or not
               based solely on four input variables. Those variables are all categorical, meaning that
               there is no order between the possible values for the variable (i.e. there is no order
               relationship between Sunny and Rain, one is not bigger nor smaller than the other, but are 
               just distinct). Moreover, the rows, or instances presented above represent days on which the
               behavior of the person has been registered and annotated, pretty much building our set of 
               observation instances for learning:</p><span id="cbc_1" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>DataTable data = <span class="highlight-keyword">new</span> DataTable(<span class="highlight-literal">"Mitchell's Tennis Example"</span>);
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>data.Columns.Add(<span class="highlight-literal">"Day"</span>, <span class="highlight-literal">"Outlook"</span>, <span class="highlight-literal">"Temperature"</span>, <span class="highlight-literal">"Humidity"</span>, <span class="highlight-literal">"Wind"</span>, <span class="highlight-literal">"PlayTennis"</span>);
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>data.Rows.Add(   <span class="highlight-literal">"D1"</span>,   <span class="highlight-literal">"Sunny"</span>,      <span class="highlight-literal">"Hot"</span>,       <span class="highlight-literal">"High"</span>,   <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"No"</span>  );
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>data.Rows.Add(   <span class="highlight-literal">"D2"</span>,   <span class="highlight-literal">"Sunny"</span>,      <span class="highlight-literal">"Hot"</span>,       <span class="highlight-literal">"High"</span>,  <span class="highlight-literal">"Strong"</span>,   <span class="highlight-literal">"No"</span>  ); 
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>data.Rows.Add(   <span class="highlight-literal">"D3"</span>,  <span class="highlight-literal">"Overcast"</span>,    <span class="highlight-literal">"Hot"</span>,       <span class="highlight-literal">"High"</span>,   <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"Yes"</span> );
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>data.Rows.Add(   <span class="highlight-literal">"D4"</span>,   <span class="highlight-literal">"Rain"</span>,       <span class="highlight-literal">"Mild"</span>,      <span class="highlight-literal">"High"</span>,   <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"Yes"</span> ); 
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>data.Rows.Add(   <span class="highlight-literal">"D5"</span>,   <span class="highlight-literal">"Rain"</span>,       <span class="highlight-literal">"Cool"</span>,     <span class="highlight-literal">"Normal"</span>,  <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"Yes"</span> ); 
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>data.Rows.Add(   <span class="highlight-literal">"D6"</span>,   <span class="highlight-literal">"Rain"</span>,       <span class="highlight-literal">"Cool"</span>,     <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Strong"</span>,   <span class="highlight-literal">"No"</span>  ); 
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>data.Rows.Add(   <span class="highlight-literal">"D7"</span>,  <span class="highlight-literal">"Overcast"</span>,    <span class="highlight-literal">"Cool"</span>,     <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Strong"</span>,   <span class="highlight-literal">"Yes"</span> );
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>data.Rows.Add(   <span class="highlight-literal">"D8"</span>,   <span class="highlight-literal">"Sunny"</span>,      <span class="highlight-literal">"Mild"</span>,      <span class="highlight-literal">"High"</span>,   <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"No"</span>  );  
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>data.Rows.Add(   <span class="highlight-literal">"D9"</span>,   <span class="highlight-literal">"Sunny"</span>,      <span class="highlight-literal">"Cool"</span>,     <span class="highlight-literal">"Normal"</span>,  <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"Yes"</span> ); 
<span class="highlight-lineno">14</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>data.Rows.Add(   <span class="highlight-literal">"D10"</span>, <span class="highlight-literal">"Rain"</span>,        <span class="highlight-literal">"Mild"</span>,     <span class="highlight-literal">"Normal"</span>,  <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"Yes"</span> ); 
<span class="highlight-lineno">15</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>data.Rows.Add(   <span class="highlight-literal">"D11"</span>,  <span class="highlight-literal">"Sunny"</span>,      <span class="highlight-literal">"Mild"</span>,     <span class="highlight-literal">"Normal"</span>, <span class="highlight-literal">"Strong"</span>,   <span class="highlight-literal">"Yes"</span> );
<span class="highlight-lineno">16</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>data.Rows.Add(   <span class="highlight-literal">"D12"</span>, <span class="highlight-literal">"Overcast"</span>,    <span class="highlight-literal">"Mild"</span>,      <span class="highlight-literal">"High"</span>,  <span class="highlight-literal">"Strong"</span>,   <span class="highlight-literal">"Yes"</span> ); 
<span class="highlight-lineno">17</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>data.Rows.Add(   <span class="highlight-literal">"D13"</span>, <span class="highlight-literal">"Overcast"</span>,    <span class="highlight-literal">"Hot"</span>,      <span class="highlight-literal">"Normal"</span>,  <span class="highlight-literal">"Weak"</span>,    <span class="highlight-literal">"Yes"</span> ); 
<span class="highlight-lineno">18</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>data.Rows.Add(   <span class="highlight-literal">"D14"</span>,  <span class="highlight-literal">"Rain"</span>,       <span class="highlight-literal">"Mild"</span>,      <span class="highlight-literal">"High"</span>,  <span class="highlight-literal">"Strong"</span>,   <span class="highlight-literal">"No"</span>  );</pre></div></span><p>
               In order to try to learn a decision tree, we will first convert this problem to a more simpler
               representation. Since all variables are categories, it does not matter if they are represented
               as strings, or numbers, since both are just symbols for the event they represent. Since numbers
               are more easily representable than text string, we will convert the problem to use a discrete 
               alphabet through the use of a <a href="T_Accord_Statistics_Filters_Codification.htm">codebook</a>.</p><p>
               A codebook effectively transforms any distinct possible value for a variable into an integer 
               symbol. For example, “Sunny” could as well be represented by the integer label 0, “Overcast” 
               by “1”, Rain by “2”, and the same goes by for the other variables. So:</p><span id="cbc_2" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-lineno">1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Create a new codification codebook to </span>
<span class="highlight-lineno">2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// convert strings into integer symbols</span>
<span class="highlight-lineno">3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>Codification codebook = <span class="highlight-keyword">new</span> Codification(data);
<span class="highlight-lineno">4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Translate our training data into integer symbols using our codebook:</span>
<span class="highlight-lineno">6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>DataTable symbols = codebook.Apply(data); 
<span class="highlight-lineno">7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">int</span>[][] inputs  = symbols.ToIntArray(<span class="highlight-literal">"Outlook"</span>, <span class="highlight-literal">"Temperature"</span>, <span class="highlight-literal">"Humidity"</span>, <span class="highlight-literal">"Wind"</span>); 
<span class="highlight-lineno">8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">int</span>[]   outputs = symbols.ToIntArray(<span class="highlight-literal">"PlayTennis"</span>).GetColumn(<span class="highlight-number">0</span>);</pre></div></span><p>
               Now that we already have our learning input/ouput pairs, we should specify our
               decision tree. We will be trying to build a tree to predict the last column, entitled
               “PlayTennis”. For this, we will be using the “Outlook”, “Temperature”, “Humidity” and
               “Wind” as predictors (variables which will we will use for our decision). Since those
               are categorical, we must specify, at the moment of creation of our tree, the
               characteristics of each of those variables. So:
             </p><span id="cbc_3" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-lineno"> 1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Gather information about decision variables</span>
<span class="highlight-lineno"> 2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>DecisionVariable[] attributes =
<span class="highlight-lineno"> 3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>{
<span class="highlight-lineno"> 4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">new</span> DecisionVariable(<span class="highlight-literal">"Outlook"</span>,     <span class="highlight-number">3</span>), <span class="highlight-comment">// 3 possible values (Sunny, overcast, rain)</span>
<span class="highlight-lineno"> 5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">new</span> DecisionVariable(<span class="highlight-literal">"Temperature"</span>, <span class="highlight-number">3</span>), <span class="highlight-comment">// 3 possible values (Hot, mild, cool)  </span>
<span class="highlight-lineno"> 6</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">new</span> DecisionVariable(<span class="highlight-literal">"Humidity"</span>,    <span class="highlight-number">2</span>), <span class="highlight-comment">// 2 possible values (High, normal)    </span>
<span class="highlight-lineno"> 7</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>  <span class="highlight-keyword">new</span> DecisionVariable(<span class="highlight-literal">"Wind"</span>,        <span class="highlight-number">2</span>)  <span class="highlight-comment">// 2 possible values (Weak, strong) </span>
<span class="highlight-lineno"> 8</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>};
<span class="highlight-lineno"> 9</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">10</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-keyword">int</span> classCount = <span class="highlight-number">2</span>; <span class="highlight-comment">// 2 possible output values for playing tennis: yes or no</span>
<span class="highlight-lineno">11</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">12</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">//Create the decision tree using the attributes and classes</span>
<span class="highlight-lineno">13</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>DecisionTree tree = <span class="highlight-keyword">new</span> DecisionTree(attributes, classCount);</pre></div></span><p>Now we have created our decision tree. Unfortunately, it is not really very useful,
             since we haven't taught it the problem we are trying to predict. So now we must instantiate
             a learning algorithm to make it useful. For this task, in which we have only categorical 
             variables, the simplest choice is to use the ID3 algorithm by Quinlan. Let’s do it:</p><span id="cbc_4" x-lang="CSharp" codeLanguage="CSharp"><div class="highlight-title"><span class="highlight-copycode" onkeypress="javascript:CopyColorizedCodeCheckKey(this.parentNode, event);" tabindex="0" onmouseover="CopyCodeChangeIcon(this)" onmouseout="CopyCodeChangeIcon(this)" onclick="javascript:CopyColorizedCode(this.parentNode);"><img style="margin-right: 5px;" src="../icons/CopyCode.gif" />Copy</span>C#</div><div class="code"><pre xml:space="preserve"><span class="highlight-lineno">1</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Create a new instance of the ID3 algorithm</span>
<span class="highlight-lineno">2</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>ID3Learning id3learning = <span class="highlight-keyword">new</span> ID3Learning(tree);
<span class="highlight-lineno">3</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>
<span class="highlight-lineno">4</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span><span class="highlight-comment">// Learn the training instances!</span>
<span class="highlight-lineno">5</span><span class="highlight-lnborder"></span><span class="highlight-spacerShort"></span>id3learning.Run(inputs, outputs);</pre></div></span><p>The tree can now be queried for new examples through its <a href="M_Accord_MachineLearning_DecisionTrees_DecisionTree_Compute.htm">Compute(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Double<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span><span class="fs">[]</span></span>)</a> method.
             </p></div><h1 class="heading"><span onclick="ExpandCollapse(familyToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(familyToggle, event)" tabindex="0"><img id="familyToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />Inheritance Hierarchy</span></h1><div id="familySection" class="section" name="collapseableSection" style=""><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">System<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>Object</a><br />  <span class="selflink">Accord.MachineLearning.DecisionTrees.Learning<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span><span class="fs">.</span></span>ID3Learning</span><br /></div><h1 class="heading"><span onclick="ExpandCollapse(seeAlsoToggle)" style="cursor:default;" onkeypress="ExpandCollapse_CheckKey(seeAlsoToggle, event)" tabindex="0"><img id="seeAlsoToggle" class="toggle" name="toggleSwitch" src="../icons/collapse_all.gif" />See Also</span></h1><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><a href="AllMembers_T_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning.htm">ID3Learning Members</a></div><div class="seeAlsoStyle"><a href="N_Accord_MachineLearning_DecisionTrees_Learning.htm">Accord.MachineLearning.DecisionTrees.Learning Namespace</a></div></div></div>
      <div id="footer">
        <div class="footerLine">
          <img width="100%" height="3px" src="../icons/footer.gif" alt="Footer image" title="Footer image" />
        </div>
        <A NAME="feedback"></A>
        <span id="fb" class="feedbackcss"></span>
        <a href="http://accord.googlecode.com" target="_blank">Accord.NET Framework</a> © 2009-2012. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.  <script type="text/javascript">    var _gaq = _gaq || [];   _gaq.push(['_setAccount', 'UA-3114672-4']);   _gaq.push(['_trackPageview']);    (function() {     var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;     ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';     var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);   })();  </script></div>
    </div>
  </body>
</html>